{"version":3,"file":"index.js","mappings":"0HAAA,eAIA,iCAEQA,eAAeC,GACrBC,QAAQC,IAAIF,GACZC,QAAQC,IAAI,qCAAsCF,EAAoBG,WAAWC,SAAS,QAE1FH,QAAQC,IAAI,2CAA4CF,EAAoBK,iBAAiBD,SAAS,QAuBtG,MAAME,EAAMC,OAAOC,KAAK,mCAAoC,OACtDC,EAAKF,OAAOG,OAAO,CAACV,EAAoBW,YAAaX,EAAoBY,eAIxDZ,EAAoBK,iBAAiBQ,OAE5CN,OAAOO,MAJH,IAKZC,KAAK,GAMb,MAAMC,EAAQT,OAAOG,OAAO,CAACD,EAAIF,OAAOC,KAAK,WAAY,SACzD,IAAIS,EAAWC,EAAOC,iBAAiB,cAAeb,EAAKU,GAK3D,MAAMI,EAASH,EAASG,OAAOpB,EAAoBK,kBAEnDJ,QAAQC,IAAI,SAAUkB,EAAOhB,SAAS,QAGtC,MAAMiB,EAAQJ,EAASI,QAEvBpB,QAAQC,IAAI,QAASmB,EAAMjB,SAAS,QAEpCJ,EAAoBsB,iBAAmBf,OAAOG,OAAO,CAACU,EAAQC,IAE9DpB,QAAQC,IAAI,gBAAgBF,EAAoBsB,iBAAiBlB,SAAS,UAC1EH,QAAQC,IAAI,iBAAiBF,EAAoBsB,iBAAiBlB,SAAS,aAC3EH,QAAQC,IAAI,iBAAiBF,EAAoBsB,iBAAiBlB,cAEnE,E,sGCpED,cACA,QAEA,oCAQQmB,eAAeC,GAKrB,GAJAC,KAAKC,aAAeF,EACpBC,KAAKE,2BAA6BH,EAAQI,SAAS,EAAG,GAAGxB,WAGnB,OAAnCqB,KAAKE,2BAAqC,CAC5C,IAAIE,EAAQL,EAAQ,GAAGpB,SAAS,IAAI0B,SAAS,EAAG,KAC5CC,EAASP,EAAQ,GAAGpB,SAAS,IAAI0B,SAAS,EAAG,KAC7CE,EAAO,EAAAC,MAAMC,oBAAoBV,EAAS,EAAG,GAAGpB,WAAW0B,SAAS,EAAG,KAC3EL,KAAKU,cAAgBN,EAAM,GAAKJ,KAAKE,2BAA6BE,EAAM,GAAKE,EAASC,C,KAChF,CAIN,IAAII,EAAI,EACR,KAAMA,EAAI,GAAKZ,EAAQ,EAAIY,IAAM,IAAMZ,EAAQ,EAAIY,IAAM,KACxDA,IAED,IAAIP,EAAQ,GACRE,EAAS,GAKb,GAHGK,EAAI,IACNP,EAAQL,EAAQI,SAAS,EAAG,EAAIQ,GAAGhC,YAEjC,EAAIgC,EAAI,EAAG,CACb,IAAIC,EAAa,aAAQ,EAAID,GAAIhC,WAAWS,OAC5CkB,EAAS,EAAAE,MAAMK,uBAAuB,IAAId,EAAQI,SAAS,EAAIQ,EAAG,KAAKhC,WAAW0B,SAASO,EAAW,I,CAEvGZ,KAAKU,cAAgBV,KAAKE,2BAA6BE,EAAQE,C,CAEjE,CACWpB,kBACV,OAAOc,KAAKC,YACb,CACWa,gCACV,OAAOd,KAAKE,0BACb,CAMOa,UAAUC,EAAgBC,EAAQ,EAAGC,GAa3C,OAZUC,MAAPD,IAAkBA,EAAMF,EAAO5B,QAEd,KAAjB4B,EAAOC,IACTjB,KAAKoB,aAAe,EAAAZ,MAAMC,oBAAoBO,EAAQC,EAAQ,EAAGC,GACjElB,KAAKqB,mBAAqB,IAE1BrB,KAAKoB,aAAeJ,EAAOC,GAC3BjB,KAAKqB,mBAAqB,GAE3BrB,KAAKsB,wBAA0BtB,KAAKoB,aAAe,EACnDpB,KAAKuB,aAAevB,KAAKoB,aAAepB,KAAKqB,mBAAqB,GAE3DrB,KAAKqB,kBACb,CACWG,wBACV,OAAOxB,KAAKqB,kBACb,CACWI,kBACV,OAAOzB,KAAKuB,YACb,CACWG,6BACV,OAAO1B,KAAKsB,uBACb,CACWK,kBACV,OAAO3B,KAAKoB,YACb,CASWQ,oBAAgBC,GAC1B7B,KAAK8B,iBAAmBD,EACxB7B,KAAK+B,iBAAoD,GAAxB/B,KAAK8B,iBACtC9B,KAAKgC,wBAAmE,KAAf,GAAxBhC,KAAK8B,kBACtC9B,KAAKiC,oBAAmE,KAAf,GAAxBjC,KAAK8B,kBACtC9B,KAAKkC,gBAAmE,KAAf,GAAxBlC,KAAK8B,kBAA+C,EAAAK,OAAOC,UAAY,EAAAD,OAAOE,QAC/GrC,KAAKsC,qBAAmE,MAAf,IAAxBtC,KAAK8B,iBACvC,CAEWF,sBACV,OAAO5B,KAAK8B,gBACb,CACWS,sBACV,OAAOvC,KAAK+B,gBACb,CACWS,6BACV,OAAOxC,KAAKgC,uBACb,CACWS,yBACV,OAAOzC,KAAKiC,mBACb,CACWS,qBACV,OAAO1C,KAAKkC,eACb,CACWS,0BACV,OAAO3C,KAAKsC,oBACb,CAIOM,gBAAgB5B,EAAgBC,EAAgB,EAAGC,GACzDlB,KAAK6C,cAAgB7B,EAAOb,SAASc,EAAOC,GAC5ClB,KAAK8C,oBAAsB,EAAAtC,MAAMC,oBAAoBT,KAAK6C,cAC3D,CACW1D,mBACV,OAAOa,KAAK6C,aACb,CACWE,yBACV,OAAO/C,KAAK8C,mBACb,E,aC/GD,IAAkBX,EALAa,EALAC,EANAC,E,uIAAAA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAC9B,uBACA,8BAIiBD,EAAA,EAAAA,uBAAA,EAAAA,qBAAoB,KACrC,uBACA,8BAGiBD,EAAA,EAAAA,8BAAA,EAAAA,4BAA2B,KAC5C,yBACA,kBAGiBb,EAAA,EAAAA,SAAA,EAAAA,OAAM,KACvB,uBACA,4B,8FClBD,cAGA,SACA,QAGA,MAAagB,EAYZC,YAAoBC,EAAwCC,EAA4C,EAAAN,4BAA4BO,UAAhH,KAAAF,eAAAA,EAAwC,KAAAC,aAAAA,EAPpD,KAAAE,qBAAsD,GACtD,KAAAC,2BAA6B,IAAI,EAAAC,4BACjC,KAAAC,4BAAwC,GAExC,KAAAC,sBAAwB,CAIhC,CAEOC,mCACN,OAAO7D,KAAKwD,qBAAqBpE,OAAS,EAAI,EAAA6D,qBAAqBa,UAAY,EAAAb,qBAAqBc,OACrG,CAEOC,WAAWC,GAEjB,GADuBjE,KAAKqD,eAAeW,WAAWC,IAChC,EAAAf,cAAcY,UAAW,CAC9C,MAAMI,EAAYlE,KAAKqD,eAAec,eACtC,OAAOnE,KAAKoE,aAAaF,E,CAE1B,OAAOlE,KAAK6D,kCACb,CAGOO,aAAaC,GACnB,IAAK,IAAIC,KAAeD,EACvB,GAAIC,EAAYC,gBAAkBvE,KAAK4D,sBAAvC,CAMA,GAAmC,IAA/BU,EAAYC,eAAsB,CACrC,GAAID,EAAYE,gBAAgBpF,OAAS,GAAI,CAC5CZ,QAAQiG,KAAK,uHAAuHH,EAAYE,gBAAgBpF,UAChKY,KAAK0E,cACL,Q,CAID,GADA1E,KAAKyD,2BAA2BkB,iBAAmBL,EAAYE,gBAAgB,GAC3ExE,KAAKyD,2BAA2BkB,kBAAoBxB,EAAoByB,oCAAqC,CAChHpG,QAAQiG,KAAK,mFAAmFtB,EAAoByB,oCAAoCjG,SAAS,kBAAkBqB,KAAKyD,2BAA2BkB,iBAAiBhG,SAAS,OAC7OqB,KAAK0E,cACL,Q,CAGD1E,KAAKyD,2BAA2B3D,eAAewE,EAAYE,gBAAgBrE,SAAS,EAAG,KAGvF,MACM0E,EADoB7E,KAAKyD,2BAA2B1C,UAAUuD,EAAYE,gBAAgB,GAAI,IACjE,EAEnCxE,KAAKyD,2BAA2B7B,gBAAkB0C,EAAYE,gBAAgB,GAAKK,GACnF7E,KAAKyD,2BAA2Bb,gBAAgB0B,EAAYE,gBAAiB,GAAKK,EAAQ,GAAKA,E,CAQhG7E,KAAK2D,4BAA4BmB,KAAKR,EAAYE,iBAE7CF,EAAYS,eAOjB/E,KAAKyD,2BAA2B/E,WAAaI,OAAOG,OAAOe,KAAK2D,6BAChE3D,KAAKyD,2BAA2B7E,iBAAmBoB,KAAKyD,2BAA2B/E,WAAWyB,SAAS,GAAKH,KAAKyD,2BAA2BjC,kBAAoB,GAEhK,EAAAwD,yBAAyBC,QAAQjF,KAAKyD,4BAElCzD,KAAKyD,2BAA2B/B,wBAA0B1B,KAAKyD,2BAA2B7E,iBAAiBQ,QAO5GY,KAAKsD,cAAgB,EAAAN,4BAA4BkC,IACnDlF,KAAKwD,qBAAqBsB,KAAK9E,KAAKyD,4BAEpCzD,KAAKwD,qBAAuB,CAACxD,KAAKyD,4BAEnCzD,KAAK0E,gBAXJlG,QAAQiG,KAAK,6FAA6FzE,KAAKyD,2BAA2B/B,qCAAqC1B,KAAKyD,2BAA2B7E,iBAAiBQ,UAChOZ,QAAQC,IAAI0G,KAAKC,UAAUpF,KAAKyD,6BAChCzD,KAAK0E,gBAdL1E,KAAK4D,uB,MArCLpF,QAAQC,IAAI,uEAAuEuB,KAAK4D,oCAAoCU,EAAYC,kBACxIvE,KAAK0E,cA6DP,OAAO1E,KAAK6D,kCACb,CAEOwB,0BACN,MAAMC,EAAM,IAAItF,KAAKwD,sBAErB,OADAxD,KAAKwD,qBAAuB,GACrB8B,CACR,CAGQZ,cACP1E,KAAK4D,sBAAwB,EAC7B5D,KAAKyD,2BAA6B,IAAI,EAAAC,4BACtC1D,KAAK2D,4BAA8B,EACpC,EA5GD,wBAGyB,EAAAiB,oCAAsC,G,sFCV/D,sBASC,YAA0BW,EAA4BC,EAAkB,MAA9C,KAAAD,YAAAA,EAA4B,KAAAC,QAAAA,EAN9C,KAAAC,QAAkB,EAOzBzF,KAAKgB,OAASlC,OAAO4G,YAAYH,EAClC,CAPWnG,aACV,OAAOY,KAAKyF,OACb,CAOOE,QACN3F,KAAKyF,QAAU,CAChB,CAEOG,UAAUC,EAAmBC,EAAiB,GACpD,MAAMC,EAAYF,EAAUzG,OAAS0G,EAAiB9F,KAAKyF,QAC3D,GAAGM,EAAY/F,KAAKgB,OAAO5B,OAAQ,CAClC,GAAG2G,EAAY/F,KAAKwF,QAEnB,OADAhH,QAAQwH,MAAM,kDAAkDhG,KAAKgB,OAAO5B,qBAAqBY,KAAKwF,4BAA4BxF,KAAKyF,6BAA6BI,EAAUzG,OAAS0G,MAChL,EAER,GAAG9F,KAAKgB,OAAO5B,OAASY,KAAKwF,QAAS,CACrChH,QAAQiG,KAAK,kDAAkDzE,KAAKgB,OAAO5B,2BAA2BY,KAAKyF,6BAA6BI,EAAUzG,OAAS0G,wBAAqC9F,KAAKwF,WACrM,MAAMS,EAAgBnH,OAAO4G,YAAY1F,KAAKwF,SAC3CxF,KAAKyF,QAAU,GACjBzF,KAAKgB,OAAOkF,KAAKD,EAAe,EAAG,EAAGjG,KAAKyF,SAE5CzF,KAAKgB,OAASiF,C,EAKhB,OAFAJ,EAAUK,KAAKlG,KAAKgB,OAAQhB,KAAKyF,QAASK,GAC1C9F,KAAKyF,QAAUM,GACR,CACR,CAiBOI,sBAAsBC,GAC5B,MACMC,EAAmBrG,KAAKgB,OAAOsF,QAAQF,EADlB,GAE3B,OAAGC,EAFwB,GAG1BrG,KAAKyF,QAAU,GACR,IAERzF,KAAKgB,OAAOkF,KAAKlG,KAAKgB,OAAQ,EAAGqF,GACjCrG,KAAKyF,SAAWY,GACT,EACR,CAEOE,gBAIN,MAAMC,EAAmB,IAAIC,MAAMzG,KAAKyF,SACxC,IAAI,IAAI9E,EAAI,EAAGA,EAAIX,KAAKyF,QAAS9E,IAChC6F,EAAO7F,GAAKX,KAAKgB,OAAOL,GAEzB,OAAO6F,CACR,E,yFC1ED,cACA,SACA,SAIA,MAAaE,EAAb,cAKS,KAAAC,gBAAkB,IAAI,EAAAC,SACtB,KAAAC,oBAAqB,EAIrB,KAAAC,cAAgB,IAAI,EAAAC,cAAcL,EAAeM,yBAA0BN,EAAeO,sBAE1F,KAAA/C,UAAwB,EA2HjC,CAxHQgD,wBACN,OAAOlH,KAAKkE,UAAU9E,OAAS,EAAI,EAAA8D,cAAcY,UAAY,EAAAZ,cAAca,OAC5E,CAEQW,cACP1E,KAAK6G,oBAAoB,EACzB7G,KAAK2G,gBAAkB,IAAI,EAAAC,QAC5B,CAEO5C,WAAWC,GAEjB,IAAIkD,EAAc,EAClB,IAAInH,KAAK6G,mBAAoB,CAE5B,GADAM,EAAclD,EAAQqC,QAAQI,EAAeN,WAC1Ce,EAAc,EAChB,OAAOnH,KAAKkH,wBAEblH,KAAK6G,oBAAqB,C,CAE3B,OAAI7G,KAAK8G,cAAclB,UAAU3B,EAASkD,IACzCnH,KAAK8G,cAAcnB,QAIb3F,KAAKoH,eACb,CAGOjD,eACN,MAAMmB,EAAM,IAAItF,KAAKkE,WAErB,OADAlE,KAAKkE,UAAY,GACVoB,CACR,CAEQ8B,gBACP,GAAGpH,KAAK8G,cAAc1H,OAAS,EAC9B,OAAOY,KAAKkH,wBAGb,GAAGlH,KAAK2G,gBAAgBU,YAAc,EAAG,CAExC,GAAGrH,KAAK8G,cAAc9F,OAAO,IAAM0F,EAAeN,WAAapG,KAAK8G,cAAc9F,OAAO,IAAMhB,KAAK8G,cAAc9F,OAAO,GACxH,OAAOhB,KAAKmG,wBAEbnG,KAAK2G,gBAAgBU,WAAarH,KAAK8G,cAAc9F,OAAO,E,CAG7D,GAAGhB,KAAK2G,gBAAgBU,YAAc,EAErC,OAAOrH,KAAKmG,wBAKb,GAAGnG,KAAK8G,cAAc1H,OAASY,KAAK2G,gBAAgBlF,YACnD,OAAOzB,KAAKkH,wBAGb,GAAGlH,KAAK8G,cAAc9F,OAAOhB,KAAK2G,gBAAgBlF,YAAc,IAAMiF,EAAeY,SACpF,OAAOtH,KAAKmG,wBAGb,MAAMoB,EAAqBvH,KAAKwH,gBAEhC,GADAxH,KAAK2G,gBAAgBc,SAAWzH,KAAK8G,cAAc9F,OAAOhB,KAAK2G,gBAAgBlF,YAAe,GAC3F8F,GAAsBvH,KAAK2G,gBAAgBc,SAE7C,OADAjJ,QAAQiG,KAAK,mBAAoB8C,EAAoBvH,KAAK2G,gBAAgBc,UACnEzH,KAAKmG,wBAKbnG,KAAK2G,gBAAgBe,aAAe1H,KAAK8G,cAAc9F,OAAO,GAC9DhB,KAAK2G,gBAAgBgB,aAAe3H,KAAK8G,cAAc9F,OAAO,GAG9DhB,KAAK2G,gBAAgBiB,wBAA0B5H,KAAK8G,cAAc9F,OAAO,GACzEhB,KAAK2G,gBAAgBkB,cAAgB7H,KAAK8G,cAAc9F,OAAO,GAC/DhB,KAAK2G,gBAAgBmB,mBAAqB9H,KAAK8G,cAAc9F,OAAO,GAGpEhB,KAAK2G,gBAAgBnC,gBAAkBxE,KAAK8G,cAAc9F,OAAOb,SAAS,EAAGH,KAAK2G,gBAAgBlF,YAAc,GAGhHzB,KAAKkE,UAAUY,KAAK9E,KAAK2G,iBACzB,MAAMoB,EAAM/H,KAAK2G,gBAAgBlF,YAEjC,GADAzB,KAAK0E,cACF1E,KAAK8G,cAAc1H,QAAU2I,EAE/B,OADA/H,KAAK8G,cAAgB,IAAI,EAAAC,cAAcL,EAAeM,yBAA0BN,EAAeO,sBACxF,EAAA/D,cAAcY,UAItB,MAAMkE,EAAmBhI,KAAK8G,cAI9B,OAHA9G,KAAK8G,cAAgB,IAAI,EAAAC,cAAcL,EAAeM,yBAA0BN,EAAeO,sBAC/FjH,KAAK8G,cAAclB,UAAUoC,EAAiBhH,OAAOb,SAAS,EAAG6H,EAAiB5I,QAAS2I,GAEpF/H,KAAKoH,eACb,CAEQjB,wBAGP,OADAnG,KAAK0E,cACD1E,KAAK8G,cAAcX,sBAAsBO,EAAeN,YAI5DpG,KAAK6G,oBAAqB,EACnB7G,KAAKoH,iBAJJpH,KAAKkH,uBAKd,CAGQM,gBACP,MACMtG,EAAMlB,KAAK2G,gBAAgBlF,YAAe,EAChD,IAAIwG,EAAM,EACV,IAAI,IAAItH,EAHM,EAGKA,EAAIO,EAAKP,IAC3BsH,GAAOjI,KAAK8G,cAAc9F,OAAOL,GAElC,OAAa,IAANsH,CACR,EAtID,mBAEiB,EAAA7B,UAAoB,IACpB,EAAAkB,SAAmB,GAKnB,EAAAN,yBAA2B,IAC3B,EAAAC,qBAAuB,I,iFCbxC,+BAGS,KAAAiB,YAAsB,EACtB,KAAA3G,aAAuB,EACvB,KAAA4G,qBAA+B,EAC/B,KAAAC,uBAAiC,EAqBlC,KAAAX,UAAoB,EACpB,KAAAC,aAAuB,EACvB,KAAAC,aAAuB,EAMtB,KAAAU,yBAAmC,EACnC,KAAAC,gBAA0B,EAC1B,KAAAC,gBAA0B,EAqB3B,KAAAV,cAAwB,EACxB,KAAAC,mBAA6B,CASrC,CA5DYT,eAAWU,GACrB/H,KAAKkI,YAAcH,EACnB/H,KAAKuB,aAAewG,EAAM,EAC1B/H,KAAKmI,qBAAuBJ,EAAM,EAClC/H,KAAKoI,uBAAyBL,EAAM,CACrC,CACWV,iBACV,OAAOrH,KAAKkI,WACb,CACWzG,kBACV,OAAOzB,KAAKuB,YACb,CACWiH,0BACV,OAAOxI,KAAKmI,oBACb,CACWM,4BACV,OAAOzI,KAAKoI,sBACb,CAcWR,4BAAwBc,GAClC1I,KAAKqI,yBAA2BK,EAChC1I,KAAKsI,gBAAkD,GAAhCtI,KAAKqI,yBAC5BrI,KAAKuI,eAAiE,KAAf,GAAhCvI,KAAKqI,yBAC7B,CAGWT,8BACV,OAAO5H,KAAKqI,wBACb,CAEW9D,qBACV,OAAOvE,KAAKsI,eACb,CAEWvD,oBACV,OAAO/E,KAAKuI,cACb,E,6ECzDD,cAEQjK,8BAA8BqK,GACpC,OAAOC,OAAOC,gBAAgBF,EAC/B,CAEOrK,8BAA8BqK,GACpC,IAAInC,EAAS,EACb,IAAI,IAAI7F,EAAIgI,EAAMvJ,OAAS,EAAG0J,EAAa,EAAGnI,GAAK,EAAGA,IACrD6F,GAAUmC,EAAMhI,GAAKmI,EACrBA,GAAc,IAEf,OAAOtC,CACR,CAEOlI,iCAAiCyK,GAEvCA,EAAYA,EAAUC,QAAQ,OAAQ,IACtC,IAAIL,EAAQ,GACZ,IAAK,IAAIM,EAAI,EAAGA,EAAIF,EAAU3J,OAAQ6J,GAAK,EAC1CN,EAAM7D,KAAKoE,SAASH,EAAUI,UAAUF,EAAGA,EAAI,GAAI,KAEpD,OAAON,CACR,CAEOrK,iCAAiCqK,EAAiBS,GAAa,GACrE,IAAIC,EAAa,GACjB,IAAK,IAAI1I,EAAI,EAAGA,EAAIgI,EAAMvJ,OAAQuB,IAAK,CACtC,MAAM2I,EAAUX,EAAMhI,GAAK,EAAIgI,EAAMhI,GAAK,IAAMgI,EAAMhI,GACtD0I,EAAWvE,MAAMwE,IAAY,GAAG3K,SAAS,KACzC0K,EAAWvE,MAAgB,GAAVwE,GAAe3K,SAAS,I,CAE1C,OAAO0K,EAAWE,KAAKH,EAAa,IAAM,GAC3C,CAEO9K,2BAA2B0C,EAAgBC,EAAQ,EAAGC,GAClDC,MAAPD,IAAkBA,EAAMF,EAAO5B,QAClC,IAAIoH,EAAS,EACb,IAAI,IAAI7F,EAAIO,EAAM,EAAG4H,EAAa,EAAGnI,GAAKM,EAAON,IAChD6F,GAAUxF,EAAOL,GAAKmI,EACtBA,GAAc,IAEf,OAAOtC,CACR,E,UC5CDgD,EAAOC,QAAUC,QAAQ,a,UCAzBF,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqB1I,IAAjB2I,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAM,EAAoBF,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,oFCtBA,eAIA,SACA,QACA,UAYA,WACC,MAAMO,EAAO,IAAI,EAAAC,WAAW,CAC3BC,KATK,8FAULC,SATS,KAUTC,SATS,EAUTC,OATO,OAUPC,SATS,IAYJjH,EAAiB,IAAI,EAAAqD,eACrB6D,EAAsB,IAAI,EAAApH,oBAAoBE,GAQpD2G,EAAKQ,GAAG,QAAQ,SAAUC,GAazB,GAD4BpH,EAAeW,WAAWyG,IAC5B,EAAAvH,cAAcY,UAAW,CAClD,MAAMI,EAAYb,EAAec,eAIjC,GAHA3F,QAAQC,IAAI0G,KAAKC,UAAUlB,IAEMqG,EAAoBnG,aAAaF,IACnC,EAAAjB,qBAAqBa,UAAW,CAC9D,MAAMN,EAAuB+G,EAAoBlF,0BACjD7G,QAAQC,IAAI0G,KAAKC,UAAU5B,G,EAG9B,IAOAwG,EAAKQ,GAAG,SAAS,SAASE,GACzBlM,QAAQwH,MAAM,UAAW0E,EAAIC,QAC9B,GACD,CAIAC,E","sources":["webpack://smartmeter-mbus-dlms/./src/lib/application-data-decrypter.ts","webpack://smartmeter-mbus-dlms/./src/lib/application-protocol-data-unit.ts","webpack://smartmeter-mbus-dlms/./src/lib/enums.ts","webpack://smartmeter-mbus-dlms/./src/lib/multi-telegram-reader.ts","webpack://smartmeter-mbus-dlms/./src/lib/receive-buffer.ts","webpack://smartmeter-mbus-dlms/./src/lib/telegram-reader.ts","webpack://smartmeter-mbus-dlms/./src/lib/telegram.ts","webpack://smartmeter-mbus-dlms/./src/lib/tools.ts","webpack://smartmeter-mbus-dlms/external commonjs \"serialport\"","webpack://smartmeter-mbus-dlms/external node-commonjs \"crypto\"","webpack://smartmeter-mbus-dlms/webpack/bootstrap","webpack://smartmeter-mbus-dlms/./src/smartmeter-mbus-dlms.ts"],"sourcesContent":["import * as crypto from \"crypto\";\r\n\r\nimport { ApplicationProtocolDataUnit } from \"./application-protocol-data-unit\";\r\n\r\nexport class ApplicationDataDecrypter {\r\n\r\n\tpublic static Decrypt(applicationDataUnit: ApplicationProtocolDataUnit): void {\r\n\t\tconsole.log(applicationDataUnit);\r\n\t\tconsole.log('applicationDataUnit.apduBuffer hex', applicationDataUnit.apduBuffer.toString('hex'))\r\n\t\t//console.log('applicationDataUnit.encryptedPayload base64', applicationDataUnit.encryptedPayload.toString('base64'))\r\n\t\tconsole.log('applicationDataUnit.encryptedPayload hex', applicationDataUnit.encryptedPayload.toString('hex'))\r\n\t\t// const key = Buffer.from('***REMOVED***', 'hex');\r\n\t\t// const iv = Buffer.concat([Buffer.from('00000000', 'hex'), applicationDataUnit.systemTitle, applicationDataUnit.frameCounter]);\r\n\t\t// //const iv = Buffer.concat([applicationDataUnit.systemTitle, applicationDataUnit.frameCounter, Buffer.from('00000000', 'hex')]);\r\n\t\t// console.log(`iv: \\t${iv.toString('hex')}`);\r\n\t\t//\r\n\t\t//\r\n\t\t// const decipher = crypto.createDecipheriv('aes-128-cbc', key, iv);\r\n\t\t//\r\n\t\t// const update = decipher.update(applicationDataUnit.encryptedPayload);\r\n\t\t// console.log('update', update.toString('hex'));\r\n\t\t// console.log('update', update.toString('utf-8'));\r\n\t\t//\r\n\t\t// const final =  decipher.final();\r\n\t\t// console.log('final', final.toString('hex'));\r\n\t\t// console.log('final', final.toString('utf-8'));\r\n\t\t//\r\n\t\t// applicationDataUnit.decryptedPayload = Buffer.concat([update, final]);\r\n\t\t//\r\n\t\t// console.log(`Decrypted: \\t${applicationDataUnit.decryptedPayload.toString('hex')}`);\r\n\t\t// console.log(`Decrypted: \\t\"${applicationDataUnit.decryptedPayload.toString('utf-8')}\"`);\r\n\t\t// console.log(`Decrypted: \\t\"${applicationDataUnit.decryptedPayload.toString()}\"`);\r\n\r\n\t\tconst key = Buffer.from('***REMOVED***', 'hex');\r\n\t\tconst iv = Buffer.concat([applicationDataUnit.systemTitle, applicationDataUnit.frameCounter]);\r\n\t\t//const iv = Buffer.concat([Buffer.from('00000000', 'hex'), applicationDataUnit.systemTitle, applicationDataUnit.frameCounter]);\r\n\t\tlet authTagLength = 12;\r\n\r\n\t\tlet encryptedDataLen = applicationDataUnit.encryptedPayload.length\r\n\t\t//let authTag = applicationDataUnit.encryptedPayload.subarray(encryptedDataLen - authTagLength, encryptedDataLen);\r\n\t\tconst authTag = Buffer.alloc(authTagLength);\r\n\t\tauthTag.fill(0);\r\n\t\t//const cipher = crypto.createCipheriv('aes-128-gcm', key, iv);\r\n\t\t//const authTag = cipher.getAuthTag().toString(\"hex\");  // <- new\r\n\r\n\t\t//let decipher = crypto.createDecipheriv('aes-128-gcm', key, iv, { authTagLength });\r\n\t\t//decipher.setAuthTag(authTag);\r\n\t\tconst ctriv = Buffer.concat([iv, Buffer.from(\"00000002\", 'hex')]);\r\n\t\tlet decipher = crypto.createDecipheriv('aes-128-ctr', key, ctriv);\r\n\r\n\t\t//decipher.setAAD(authTag);\r\n\t\t//decipher.setAuthTag(Buffer.from(authTag, 'hex'));\r\n\r\n\t\tconst update = decipher.update(applicationDataUnit.encryptedPayload);\r\n\t\t//console.log('update', update.toString());\r\n\t\tconsole.log('update', update.toString('hex'));\r\n\t\t//console.log('update', update.toString('utf-8'));\r\n\r\n\t\tconst final = decipher.final();\r\n\t\t//console.log('final', final.toString());\r\n\t\tconsole.log('final', final.toString('hex'));\r\n\t\t// console.log('final', final.toString('utf-8'));\r\n\t\tapplicationDataUnit.decryptedPayload = Buffer.concat([update, final]);\r\n\r\n\t\tconsole.log(`Decrypted: \\t${applicationDataUnit.decryptedPayload.toString('hex')}`);\r\n\t\tconsole.log(`Decrypted: \\t\"${applicationDataUnit.decryptedPayload.toString('utf-8')}\"`);\r\n\t\tconsole.log(`Decrypted: \\t\"${applicationDataUnit.decryptedPayload.toString()}\"`);\r\n\r\n\t}\r\n}\r\n","import { KeySet } from \"./enums\";\r\nimport { Tools } from \"./tools\";\r\n\r\nexport class ApplicationProtocolDataUnit {\r\n\tpublic cypheringService: number;\r\n\r\n\tpublic systemTitleLength: number;\r\n\r\n\tprivate _systemTitle: Buffer;\r\n\tprivate _systemTitleManufacturerId: string;\r\n\tprivate _serialNumber: string;\r\n\tpublic setSystemTitle(rawData: Buffer) {\r\n\t\tthis._systemTitle = rawData;\r\n\t\tthis._systemTitleManufacturerId = rawData.subarray(0, 3).toString();\r\n\r\n\t\t// serial number. at least for my KAIFA MA309M it seems to be:\r\n\t\tif(this._systemTitleManufacturerId == 'KFM') {\r\n\t\t\tlet first = rawData[3].toString(16).padStart(2, '0');\r\n\t\t\tlet second = rawData[4].toString(16).padStart(2, '0');\r\n\t\t\tlet rest = Tools.getNumberFromBuffer(rawData, 5, 8).toString().padStart(7, '0');\r\n\t\t\tthis._serialNumber = first[0] + this._systemTitleManufacturerId + first[1] + second + rest;\r\n\t\t} else {\r\n\t\t\t// just a guess ...\r\n\t\t\t// if first letters after manufacturer ids are alphanumeric, treat it as characters\r\n\t\t\t// treat second part as decimal number\r\n\t\t\tlet i = 0;\r\n\t\t\twhile(i < 5 && rawData[3 + i] >= 48 && rawData[3 + i] <= 122 ) {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tlet first = '';\r\n\t\t\tlet second = ''\r\n\r\n\t\t\tif(i > 0) {\r\n\t\t\t\tfirst = rawData.subarray(3, 3 + i).toString();\r\n\t\t\t}\r\n\t\t\tif(3 + i < 8) {\r\n\t\t\t\tlet padLength = (256 ** (5 - i)).toString().length;\r\n\t\t\t\tsecond = Tools.getNumberFromByteArray([...rawData.subarray(3 + i, 8)]).toString().padStart(padLength, '0');\r\n\t\t\t}\r\n\t\t\tthis._serialNumber = this._systemTitleManufacturerId + first + second;\r\n\t\t}\r\n\t}\r\n\tpublic get systemTitle(): Buffer {\r\n\t\treturn this._systemTitle;\r\n\t}\r\n\tpublic get systemTitleManufacturerId(): string {\r\n\t\treturn this._systemTitleManufacturerId;\r\n\t}\r\n\r\n\tprivate _lengthFieldLength: number;\r\n\tprivate _lengthTotal: number;\r\n\tprivate _lengthEncryptedPayload: number;\r\n\tprivate _lengthField: number;\r\n\tpublic setLength(buffer: Buffer, start = 0, end?: number): number {\r\n\t\tif(end == undefined) end = buffer.length;\r\n\t\t// length of length field is variable: 1 or 3 bytes long\r\n\t\tif(buffer[start] == 0x82) {     // 130\r\n\t\t\tthis._lengthField = Tools.getNumberFromBuffer(buffer, start + 1, end);\r\n\t\t\tthis._lengthFieldLength = 3;\r\n\t\t} else {\r\n\t\t\tthis._lengthField = buffer[start];\r\n\t\t\tthis._lengthFieldLength = 1;\r\n\t\t}\r\n\t\tthis._lengthEncryptedPayload = this._lengthField - 5;\r\n\t\tthis._lengthTotal = this._lengthField + this._lengthFieldLength + 10;\r\n\r\n\t\treturn this._lengthFieldLength;\r\n\t}\r\n\tpublic get lengthFieldLength(): number {\r\n\t\treturn this._lengthFieldLength;\r\n\t}\r\n\tpublic get lengthTotal(): number {\r\n\t\treturn this._lengthTotal;\r\n\t}\r\n\tpublic get lengthEncryptedPayload(): number {\r\n\t\treturn this._lengthEncryptedPayload;\r\n\t}\r\n\tpublic get lengthField(): number {\r\n\t\treturn this._lengthField;\r\n\t}\r\n\r\n\tprivate _securityControl: number;\r\n\tprivate _securitySuiteId: number;\r\n\tprivate _securityAuthentication: boolean;   // subfield \"A\"\r\n\tprivate _securityEncryption: boolean;       // subfield \"E\"\r\n\tprivate _securityKeySet: KeySet;           // subfield Key_Set\r\n\tprivate _securityCompression: boolean;\r\n\r\n\tpublic set securityControl(value: number) {\r\n\t\tthis._securityControl = value;\r\n\t\tthis._securitySuiteId =          this._securityControl & 0b00001111;\r\n\t\tthis._securityAuthentication =  (this._securityControl & 0b00010000) == 0b00010000;\r\n\t\tthis._securityEncryption =      (this._securityControl & 0b00100000) == 0b00100000;\r\n\t\tthis._securityKeySet =          (this._securityControl & 0b01000000) == 0b01000000 ? KeySet.broadcast : KeySet.unicast;\r\n\t\tthis._securityCompression =     (this._securityControl & 0b10000000) == 0b10000000;\r\n\t}\r\n\r\n\tpublic get securityControl(): number {\r\n\t\treturn this._securityControl;\r\n\t}\r\n\tpublic get securitySuiteId(): number {\r\n\t\treturn this._securitySuiteId;\r\n\t}\r\n\tpublic get securityAuthentication(): boolean {\r\n\t\treturn this._securityAuthentication;\r\n\t}\r\n\tpublic get securityEncryption(): boolean {\r\n\t\treturn this._securityEncryption;\r\n\t}\r\n\tpublic get securityKeySet(): KeySet {\r\n\t\treturn this._securityKeySet;\r\n\t}\r\n\tpublic get securityCompression(): boolean {\r\n\t\treturn this._securityCompression;\r\n\t}\r\n\r\n\tprivate _frameCounter: Buffer\r\n\tprivate _frameCounterNumber: number;\r\n\tpublic setFrameCounter(buffer: Buffer, start: number = 0, end?: number) {\r\n\t\tthis._frameCounter = buffer.subarray(start, end);\r\n\t\tthis._frameCounterNumber = Tools.getNumberFromBuffer(this._frameCounter);\r\n\t}\r\n\tpublic get frameCounter(): Buffer {\r\n\t\treturn this._frameCounter;\r\n\t}\r\n\tpublic get frameCounterNumber(): number {\r\n\t\treturn this._frameCounterNumber;\r\n\t}\r\n\r\n\r\n\tpublic apduBuffer: Buffer;\r\n\r\n\tpublic encryptedPayload: Buffer;\r\n\r\n\tpublic decryptedPayload: Buffer;\r\n}\r\n","export const enum TelegramState {\r\n\tpending,\r\n\tavailable\r\n}\r\n\r\n// APDU: application protocol data unit\r\nexport const enum ApplicationDataState {\r\n\tpending,\r\n\tavailable = 1\r\n}\r\n\r\nexport const enum ApplicationDataProvisioning {\r\n\tlastOnly,\r\n\tall\r\n}\r\n\r\nexport const enum KeySet {\r\n\tunicast,\r\n\tbroadcast\r\n}\r\n","import { ApplicationDataProvisioning, ApplicationDataState, TelegramState } from \"./enums\";\r\nimport { TelegramReader } from \"./telegram-reader\";\r\nimport { Telegram } from \"./telegram\";\r\nimport { ApplicationProtocolDataUnit } from \"./application-protocol-data-unit\";\r\nimport { ApplicationDataDecrypter } from \"./application-data-decrypter\";\r\n\r\n// transport layer - reads APDUs (application protocol data unit) from one or more TPDU (transport protocol data unit)\r\nexport class MultiTelegramReader {\r\n\t// either use addRawData or addTelegrams\r\n\r\n\tprivate static readonly CypheringServiceGeneralGloCiphering = 0xDB;\r\n\r\n\tprivate applicationDataUnits: ApplicationProtocolDataUnit[] = [];\r\n\tprivate currentApplicationDataUnit = new ApplicationProtocolDataUnit();\r\n\tprivate currentApplicationDataUnits: Buffer[] = [];\r\n\r\n\tprivate currentSequenceNumber = 0;\r\n\r\n\t// telegramReader would not be needed if addTelegram() is not used, but then it has to be defined in the calling code anyway\r\n\tconstructor(private telegramReader: TelegramReader, private provisioning: ApplicationDataProvisioning = ApplicationDataProvisioning.lastOnly) {\r\n\t}\r\n\r\n\tpublic areApplicationDataUnitsAvailable(): ApplicationDataState {\r\n\t\treturn this.applicationDataUnits.length > 0 ? ApplicationDataState.available : ApplicationDataState.pending;\r\n\t}\r\n\r\n\tpublic addRawData(newData: Buffer): ApplicationDataState {\r\n\t\tconst telegramStatus = this.telegramReader.addRawData(newData);\r\n\t\tif (telegramStatus == TelegramState.available) {\r\n\t\t\tconst telegrams = this.telegramReader.getTelegrams();\r\n\t\t\treturn this.addTelegrams(telegrams);\r\n\t\t}\r\n\t\treturn this.areApplicationDataUnitsAvailable();\r\n\t}\r\n\r\n\r\n\tpublic addTelegrams(newTelegrams: Telegram[]): ApplicationDataState {\r\n\t\tfor (let newTelegram of newTelegrams) {\r\n\t\t\tif (newTelegram.sequenceNumber != this.currentSequenceNumber) {\r\n\t\t\t\tconsole.log(`addTelegrams: Sequence number does not match. Start over. Expected: ${this.currentSequenceNumber}. Received: ${newTelegram.sequenceNumber}`);\r\n\t\t\t\tthis.resetSearch();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (newTelegram.sequenceNumber === 0) {\r\n\t\t\t\tif (newTelegram.applicationData.length < 17) {\r\n\t\t\t\t\tconsole.warn(`addTelegrams: Application data length of first telegram in sequence invalid. Start over. Expected: >= 17. Received: ${newTelegram.applicationData.length}`);\r\n\t\t\t\t\tthis.resetSearch();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.cypheringService = newTelegram.applicationData[0];\r\n\t\t\t\tif (this.currentApplicationDataUnit.cypheringService != MultiTelegramReader.CypheringServiceGeneralGloCiphering) {\r\n\t\t\t\t\tconsole.warn(`addTelegrams: Application data cyphering service invalid. Start over. Expected: ${MultiTelegramReader.CypheringServiceGeneralGloCiphering.toString(16)}. Received: ${this.currentApplicationDataUnit.cypheringService.toString(16)}`);\r\n\t\t\t\t\tthis.resetSearch();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.setSystemTitle(newTelegram.applicationData.subarray(2, 10));\r\n\r\n\t\t\t\t// length filed has either 1 byte (length <= 127) or 3 bytes\r\n\t\t\t\tconst lengthFieldLength = this.currentApplicationDataUnit.setLength(newTelegram.applicationData,10, 13);\r\n\t\t\t\tconst offset = lengthFieldLength - 1\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.securityControl = newTelegram.applicationData[11 + offset];\r\n\t\t\t\tthis.currentApplicationDataUnit.setFrameCounter(newTelegram.applicationData, 12 + offset, 16 + offset);\r\n\r\n\t\t\t\t//this.currentApplicationDataUnit.encryptedPayload = newTelegram.applicationData.subarray(16 + offset);\r\n\t\t\t\t//this.currentEncryptedPayloads.push(newTelegram.applicationData.subarray(16 + offset));\r\n\t\t\t// } else {\r\n\t\t\t// \t//this.currentApplicationDataUnit.encryptedPayload(...newTelegram.applicationData);\r\n\t\t\t// \tthis.currentApplicationDataUnits.push(newTelegram.applicationData);\r\n\t\t\t}\r\n\t\t\tthis.currentApplicationDataUnits.push(newTelegram.applicationData);\r\n\r\n\t\t\tif (!newTelegram.isLastSegment) {\r\n\t\t\t\tthis.currentSequenceNumber++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// last segment:\r\n\r\n\t\t\tthis.currentApplicationDataUnit.apduBuffer = Buffer.concat(this.currentApplicationDataUnits);\r\n\t\t\tthis.currentApplicationDataUnit.encryptedPayload = this.currentApplicationDataUnit.apduBuffer.subarray(16 + this.currentApplicationDataUnit.lengthFieldLength - 1)\r\n\r\n\t\t\tApplicationDataDecrypter.Decrypt(this.currentApplicationDataUnit);\r\n\r\n\t\t\tif (this.currentApplicationDataUnit.lengthEncryptedPayload != this.currentApplicationDataUnit.encryptedPayload.length) {\r\n\t\t\t\tconsole.warn(`addTelegrams: Application data length of combined segments invalid. Start over. Expected: ${this.currentApplicationDataUnit.lengthEncryptedPayload}. Received: ${this.currentApplicationDataUnit.encryptedPayload.length}`);\r\n\t\t\t\tconsole.log(JSON.stringify(this.currentApplicationDataUnit));\r\n\t\t\t\tthis.resetSearch();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// everything seems to be fine:\r\n\t\t\tif(this.provisioning == ApplicationDataProvisioning.all) {\r\n\t\t\t\tthis.applicationDataUnits.push(this.currentApplicationDataUnit);\r\n\t\t\t} else {\r\n\t\t\t\tthis.applicationDataUnits = [this.currentApplicationDataUnit];\r\n\t\t\t}\r\n\t\t\tthis.resetSearch();\r\n\t\t}\r\n\t\treturn this.areApplicationDataUnitsAvailable();\r\n\t}\r\n\r\n\tpublic getApplicationDataUnits(): ApplicationProtocolDataUnit[] {\r\n\t\tconst ret = [...this.applicationDataUnits];\r\n\t\tthis.applicationDataUnits = [];\r\n\t\treturn ret;\r\n\t}\r\n\r\n\r\n\tprivate resetSearch() {\r\n\t\tthis.currentSequenceNumber = 0;\r\n\t\tthis.currentApplicationDataUnit = new ApplicationProtocolDataUnit();\r\n\t\tthis.currentApplicationDataUnits = [];\r\n\t}\r\n}\r\n","export class ReceiveBuffer {\r\n\r\n\tpublic buffer: Buffer;\r\n\tprivate _length: number = 0;\r\n\tpublic get length(): number {\r\n\t\treturn this._length;\r\n\t}\r\n\r\n\r\n\tpublic constructor(public initialSize: number, public maxSize: number = 8192) {\r\n\t\tthis.buffer = Buffer.allocUnsafe(initialSize);\r\n\t}\r\n\r\n\tpublic reset() {\r\n\t\tthis._length = 0;\r\n\t}\r\n\r\n\tpublic addBuffer(newBuffer: Buffer, newBufferStart = 0): boolean {\r\n\t\tconst newLength = newBuffer.length - newBufferStart + this._length;\r\n\t\tif(newLength > this.buffer.length) {\r\n\t\t\tif(newLength > this.maxSize) {\r\n\t\t\t\tconsole.error(`ReceiveBuffer.addBuffer overflow. Buffer size: ${this.buffer.length}. Max size: ${this.maxSize}. Current length: ${this._length}. New data length: ${newBuffer.length - newBufferStart}`);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.buffer.length < this.maxSize) {\r\n\t\t\t\tconsole.warn(`ReceiveBuffer.addBuffer overflow. Buffer size: ${this.buffer.length}. Current length: ${this._length}. New data length: ${newBuffer.length - newBufferStart}. Size increased to ${this.maxSize}`);\r\n\t\t\t\tconst maxSizeBuffer = Buffer.allocUnsafe(this.maxSize);\r\n\t\t\t\tif(this._length > 0) {\r\n\t\t\t\t\tthis.buffer.copy(maxSizeBuffer, 0, 0, this._length);\r\n\t\t\t\t}\r\n\t\t\t\tthis.buffer = maxSizeBuffer;\r\n\t\t\t}\r\n\t\t}\r\n\t\tnewBuffer.copy(this.buffer, this._length, newBufferStart);\r\n\t\tthis._length = newLength;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t// public removeStartTelegram(telegramLength: number) {\r\n\t// \tif(this._length <= telegramLength) {\r\n\t// \t\tthis.buffer = Buffer.allocUnsafe(this.initialSize);\r\n\t// \t\tthis._length = 0;\r\n\t// \t\treturn;\r\n\t// \t}\r\n\t//\r\n\t// \tconst oldBuffer = this.buffer.subarray(0, this._length);\r\n\t// \tthis.buffer = Buffer.allocUnsafe(this.initialSize);\r\n\t// \tthis._length = 0;\r\n\t// \tif(this._length > telegramLength) {\r\n\t// \t\tthis.addBuffer(oldBuffer, telegramLength)\r\n\t// \t}\r\n\t// }\r\n\r\n\tpublic checkForNewStartIndex(startByte: number): boolean {\r\n\t\tconst firstPossibleIndex = 1;\r\n\t\tconst newStartByteIndex= this.buffer.indexOf(startByte, firstPossibleIndex);\r\n\t\tif(newStartByteIndex < firstPossibleIndex) {\r\n\t\t\tthis._length = 0;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.buffer.copy(this.buffer, 0, newStartByteIndex)\r\n\t\tthis._length -= newStartByteIndex;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic asNumberArray(): number[] {\r\n\t\t//return [...this.buffer.subarray(0, this._length)];\r\n\t\t// stupid JS/Node: toJSON is 10 times faster.\r\n\r\n\t\tconst result: number[] = new Array(this._length);\r\n\t\tfor(let i = 0; i < this._length; i++) {\r\n\t\t\tresult[i] = this.buffer[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n","import { TelegramState } from \"./enums\";\r\nimport { Telegram } from \"./telegram\";\r\nimport { ReceiveBuffer } from \"./receive-buffer\";\r\n\r\n// data link layer\r\n\r\nexport class TelegramReader {\r\n\r\n\tstatic readonly startByte: number = 0x68;\r\n\tstatic readonly stopByte: number = 0x16;\r\n\r\n\tprivate currentTelegram = new Telegram();\r\n\tprivate possibleStartFound = false;\r\n\r\n\tstatic readonly receiveBufferInitialSize = 512;\r\n\tstatic readonly receiveBufferMaxSize = 8192;\r\n\tprivate receiveBuffer = new ReceiveBuffer(TelegramReader.receiveBufferInitialSize, TelegramReader.receiveBufferMaxSize);\r\n\r\n\tprivate telegrams: Telegram[] = [];\r\n\r\n\r\n\tpublic areTelegramsAvailable(): TelegramState {\r\n\t\treturn this.telegrams.length > 0 ? TelegramState.available : TelegramState.pending;\r\n\t}\r\n\r\n\tprivate resetSearch() {\r\n\t\tthis.possibleStartFound =false;\r\n\t\tthis.currentTelegram = new Telegram();\r\n\t}\r\n\r\n\tpublic addRawData(newData: Buffer): TelegramState {\r\n\t\t//console.log('addRawData', JSON.stringify(newData));\r\n\t\tlet sourceStart = 0;\r\n\t\tif(!this.possibleStartFound) {\r\n\t\t\tsourceStart = newData.indexOf(TelegramReader.startByte);\r\n\t\t\tif(sourceStart < 0) {\r\n\t\t\t\treturn this.areTelegramsAvailable();\r\n\t\t\t}\r\n\t\t\tthis.possibleStartFound = true;\r\n\t\t}\r\n\t\tif(!this.receiveBuffer.addBuffer(newData, sourceStart)) {\r\n\t\t\tthis.receiveBuffer.reset();\r\n\t\t\treturn this.checkTelegram()\r\n\t\t}\r\n\t\t// console.log('addRawData this.data', JSON.stringify(this.data), this.data.length);\r\n\t\treturn this.checkTelegram()\r\n\t}\r\n\r\n\t// only fetch them once!\r\n\tpublic getTelegrams(): Telegram[] {\r\n\t\tconst ret = [...this.telegrams];\r\n\t\tthis.telegrams = [];\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tprivate checkTelegram(): TelegramState {\r\n\t\tif(this.receiveBuffer.length < 4){\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\r\n\t\tif(this.currentTelegram.lengthData <= 0) {\r\n\t\t\t// check for telegram start sequence\r\n\t\t\tif(this.receiveBuffer.buffer[3] != TelegramReader.startByte || this.receiveBuffer.buffer[1] != this.receiveBuffer.buffer[2]) {\r\n\t\t\t\treturn this.checkForNewStartIndex();\r\n\t\t\t}\r\n\t\t\tthis.currentTelegram.lengthData = this.receiveBuffer.buffer[1];\r\n\t\t}\r\n\r\n\t\tif(this.currentTelegram.lengthData <= 3) {\r\n\t\t\t// control frame -> ignore\r\n\t\t\treturn this.checkForNewStartIndex();\r\n\t\t}\r\n\r\n\t\t// long frame\r\n\r\n\t\tif(this.receiveBuffer.length < this.currentTelegram.lengthTotal!) {\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\r\n\t\tif(this.receiveBuffer.buffer[this.currentTelegram.lengthTotal - 1] != TelegramReader.stopByte) {\r\n\t\t\treturn this.checkForNewStartIndex();\r\n\t\t}\r\n\r\n\t\tconst calculatedChecksum = this.checkChecksum();\r\n\t\tthis.currentTelegram.checkSum = this.receiveBuffer.buffer[this.currentTelegram.lengthTotal! - 2];\r\n\t\tif(calculatedChecksum != this.currentTelegram.checkSum) {\r\n\t\t\tconsole.warn('Invalid checksum', calculatedChecksum, this.currentTelegram.checkSum);\r\n\t\t\treturn this.checkForNewStartIndex();\r\n\t\t}\r\n\r\n\t\t// seems like everything is fine - set telegram fields\r\n\t\t// rest of data link layer data:\r\n\t\tthis.currentTelegram.controlField = this.receiveBuffer.buffer[4];   // should be 0x53 (83 dec)\r\n\t\tthis.currentTelegram.addressField = this.receiveBuffer.buffer[5];   // should be 0xFF (255 dec) Broadcast without reply\r\n\r\n\t\t// transport layer data:\r\n\t\tthis.currentTelegram.controlInformationField = this.receiveBuffer.buffer[6];\r\n\t\tthis.currentTelegram.sourceAddress = this.receiveBuffer.buffer[7];\r\n\t\tthis.currentTelegram.destinationAddress = this.receiveBuffer.buffer[8];\r\n\r\n\t\t// application layer data:\r\n\t\tthis.currentTelegram.applicationData = this.receiveBuffer.buffer.subarray(9, this.currentTelegram.lengthTotal - 2);\r\n\r\n\t\t// reset for next telegram\r\n\t\tthis.telegrams.push(this.currentTelegram);\r\n\t\tconst len = this.currentTelegram.lengthTotal;\r\n\t\tthis.resetSearch();\r\n\t\tif(this.receiveBuffer.length <= len) {\r\n\t\t\tthis.receiveBuffer = new ReceiveBuffer(TelegramReader.receiveBufferInitialSize, TelegramReader.receiveBufferMaxSize);\r\n\t\t\treturn TelegramState.available;\r\n\t\t}\r\n\r\n\t\t// more data in receiveBuffer:\r\n\t\tconst oldReceiveBuffer = this.receiveBuffer;\r\n\t\tthis.receiveBuffer = new ReceiveBuffer(TelegramReader.receiveBufferInitialSize, TelegramReader.receiveBufferMaxSize);\r\n\t\tthis.receiveBuffer.addBuffer(oldReceiveBuffer.buffer.subarray(0, oldReceiveBuffer.length), len);\r\n\r\n\t\treturn this.checkTelegram()\r\n\t}\r\n\r\n\tprivate checkForNewStartIndex(): TelegramState {\r\n\t\tconst firstPossibleIndex = 1;\r\n\t\tthis.resetSearch();\r\n\t\tif(!this.receiveBuffer.checkForNewStartIndex(TelegramReader.startByte)) {\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\r\n\t\tthis.possibleStartFound = true;\r\n\t\treturn this.checkTelegram();\r\n\t}\r\n\r\n\r\n\tprivate checkChecksum() {\r\n\t\tconst start = 4;\r\n\t\tconst end = this.currentTelegram.lengthTotal! - 2;\r\n\t\tlet sum = 0;\r\n\t\tfor(let i = start; i < end; i++) {\r\n\t\t\tsum += this.receiveBuffer.buffer[i];\r\n\t\t}\r\n\t\treturn sum & 0xFF;\r\n\t}\r\n}\r\n\r\n\r\n// export class TelegramReaderArray {\r\n//\r\n// \tstatic readonly startByte: number = 0x68;\r\n// \tstatic readonly stopByte: number = 0x16;\r\n//\r\n// \tprivate currentTelegram = new Telegram();\r\n// \tprivate possibleStartFound = false;\r\n//\r\n// \tprivate data: number[] = []\r\n//\r\n// \tprivate telegrams: Telegram[] = [];\r\n//\r\n//\r\n// \tpublic areTelegramsAvailable(): TelegramState {\r\n// \t\treturn this.telegrams.length > 0 ? TelegramState.available : TelegramState.pending;\r\n// \t}\r\n//\r\n// \tprivate resetSearch() {\r\n// \t\tthis.possibleStartFound =false;\r\n// \t\tthis.currentTelegram = new Telegram();\r\n// \t}\r\n//\r\n// \tpublic addRawData(newData: number[]): TelegramState {\r\n// \t\t//console.log('addRawData', JSON.stringify(newData));\r\n// \t\tif(!this.possibleStartFound) {\r\n// \t\t\tconst startByteIndex = newData.indexOf(TelegramReader.startByte);\r\n// \t\t\tif(startByteIndex < 0) {\r\n// \t\t\t\treturn this.areTelegramsAvailable();\r\n// \t\t\t}\r\n// \t\t\tthis.possibleStartFound = true;\r\n// \t\t\tif(startByteIndex > 0) {\r\n// \t\t\t\tnewData = newData.slice(startByteIndex);\r\n// \t\t\t}\r\n// \t\t}\r\n// \t\tthis.data.push(...newData);\r\n// \t\t// console.log('addRawData this.data', JSON.stringify(this.data), this.data.length);\r\n// \t\treturn this.checkTelegram()\r\n// \t}\r\n//\r\n// \t// only fetch them once!\r\n// \tpublic getTelegrams(): Telegram[] {\r\n// \t\tconst ret = [...this.telegrams];\r\n// \t\tthis.telegrams = [];\r\n// \t\treturn ret;\r\n// \t}\r\n//\r\n// \tprivate checkTelegram(): TelegramState {\r\n// \t\tif(this.data.length < 4){\r\n// \t\t\treturn this.areTelegramsAvailable();\r\n// \t\t}\r\n//\r\n// \t\tif(this.currentTelegram.lengthData <= 0) {\r\n// \t\t\t// check for telegram start sequence\r\n// \t\t\tif(this.data[3] != TelegramReader.startByte || this.data[1] != this.data[2]) {\r\n// \t\t\t\treturn this.checkForNewStartIndex(1);\r\n// \t\t\t}\r\n// \t\t\tthis.currentTelegram.lengthData = this.data[1];\r\n// \t\t}\r\n//\r\n// \t\tif(this.currentTelegram.lengthData <= 3) {\r\n// \t\t\t// control frame -> ignore\r\n// \t\t\treturn this.checkForNewStartIndex(1);\r\n// \t\t}\r\n//\r\n// \t\t// long frame\r\n//\r\n// \t\tif(this.data.length < this.currentTelegram.lengthTotal!) {\r\n// \t\t\treturn this.areTelegramsAvailable();\r\n// \t\t}\r\n//\r\n// \t\tif(this.data[this.currentTelegram.lengthTotal - 1] != TelegramReader.stopByte) {\r\n// \t\t\treturn this.checkForNewStartIndex(1);\r\n// \t\t}\r\n//\r\n// \t\tconst calculatedChecksum = this.checkChecksum();\r\n// \t\tthis.currentTelegram.checkSum = this.data[this.currentTelegram.lengthTotal! - 2];\r\n// \t\tif(calculatedChecksum != this.currentTelegram.checkSum) {\r\n// \t\t\tconsole.warn('Invalid checksum', calculatedChecksum, this.currentTelegram.checkSum);\r\n// \t\t\treturn this.checkForNewStartIndex(1);\r\n// \t\t}\r\n//\r\n// \t\t// seems like everything is fine - set telegram fields\r\n// \t\t// rest of data link layer data:\r\n// \t\tthis.currentTelegram.controlField = this.data[4];   // should be 0x53 (83 dec)\r\n// \t\tthis.currentTelegram.addressField = this.data[5];   // should be 0xFF (255 dec) Broadcast without reply\r\n//\r\n// \t\t// transport layer data:\r\n// \t\tthis.currentTelegram.controlInformationField = this.data[6];\r\n// \t\tthis.currentTelegram.sourceAddress = this.data[7];\r\n// \t\tthis.currentTelegram.destinationAddress = this.data[8];\r\n//\r\n// \t\t// application layer data:\r\n// \t\tthis.currentTelegram.applicationData = this.data.slice(9, this.currentTelegram.lengthTotal - 2);\r\n//\r\n// \t\t// reset for next telegram\r\n// \t\tthis.telegrams.push(this.currentTelegram);\r\n// \t\tconst len = this.currentTelegram.lengthTotal;\r\n// \t\tthis.resetSearch();\r\n// \t\tif(this.data.length > len) {\r\n// \t\t\tthis.data = this.data.slice(len)\r\n// \t\t\t// maybe we have another one:\r\n// \t\t\treturn this.checkTelegram()\r\n// \t\t}\r\n//\r\n// \t\tthis.data = [];\r\n// \t\t//return this.areTelegramsAvailable()\r\n// \t\treturn TelegramState.available;\r\n// \t}\r\n//\r\n// \tprivate checkForNewStartIndex(firstPossibleIndex: number): TelegramState {\r\n// \t\tthis.resetSearch();\r\n// \t\tconst newStartByteIndex= this.data.indexOf(TelegramReader.startByte, firstPossibleIndex);\r\n// \t\tif(newStartByteIndex < firstPossibleIndex) {\r\n// \t\t\tthis.data = [];\r\n// \t\t\treturn this.areTelegramsAvailable();\r\n// \t\t}\r\n// \t\tthis.data = this.data.slice(newStartByteIndex);\r\n// \t\tthis.possibleStartFound = true;\r\n// \t\treturn this.checkTelegram();\r\n// \t}\r\n//\r\n// \tprivate checkChecksum() {\r\n// \t\tconst start = 4;\r\n// \t\tconst end = this.currentTelegram.lengthTotal! - 2;\r\n// \t\tlet sum = 0;\r\n// \t\tfor(let i = start; i < end; i++) {\r\n// \t\t\tsum += this.data[i];\r\n// \t\t}\r\n// \t\treturn sum & 0xFF;\r\n// \t}\r\n// }\r\n","\r\n// represents data link, transport and application layer of single telegram\r\nexport class Telegram {\r\n\t// data link layer:\r\n\r\n\tprivate _lengthData: number = 0;\r\n\tprivate _lengthTotal: number = 0;\r\n\tprivate _lengthTransportData: number = 0;\r\n\tprivate _lengthApplicationData: number = 0;\r\n\r\n\tpublic set lengthData(len: number) {\r\n\t\tthis._lengthData = len;\r\n\t\tthis._lengthTotal = len + 6;   // 2x start, 2x len, checksum, stop\r\n\t\tthis._lengthTransportData = len - 2  // len user-data + C, A, CI field. CI is part of transport layer\r\n\t\tthis._lengthApplicationData = len - 5; // transport minus CI, STSAP, DTSAP\r\n\t}\r\n\tpublic get lengthData(): number {\r\n\t\treturn this._lengthData\r\n\t}\r\n\tpublic get lengthTotal(): number {\r\n\t\treturn this._lengthTotal\r\n\t}\r\n\tpublic get lengthTransportData(): number {\r\n\t\treturn this._lengthTransportData\r\n\t}\r\n\tpublic get lengthApplicationData(): number {\r\n\t\treturn this._lengthApplicationData\r\n\t}\r\n\r\n\tpublic checkSum: number = -1;\r\n\tpublic controlField: number = 0;    // C field\r\n\tpublic addressField: number = 0;    // A field\r\n\r\n\r\n\t// transport layer\r\n\t// TPDU (transport protocol data units)\r\n\r\n\tprivate _controlInformationField: number = 0;\r\n\tprivate _sequenceNumber: number = 0;\r\n\tprivate _isLastSegment: boolean = true; // or application data is only in one single telegram\r\n\r\n\tpublic set controlInformationField(ciField: number) {\r\n\t\tthis._controlInformationField = ciField;\r\n\t\tthis._sequenceNumber = this._controlInformationField & 0b00001111;\r\n\t\tthis._isLastSegment = (this._controlInformationField & 0b00010000) == 0b00010000;\r\n\t}\r\n\r\n\t// CI field:\r\n\tpublic get controlInformationField(): number {\r\n\t\treturn this._controlInformationField;\r\n\t}\r\n\r\n\tpublic get sequenceNumber(): number {\r\n\t\treturn this._sequenceNumber;\r\n\t}\r\n\r\n\tpublic get isLastSegment(): boolean {\r\n\t\treturn this._isLastSegment;\r\n\t}\r\n\r\n\tpublic sourceAddress: number = 0;           // STSAP (source transport service access point)\r\n\tpublic destinationAddress: number = 0;  \t// DTSAP (destination transport service access point)\r\n\r\n\r\n\t// application layer\r\n\t// APDU (application protocol data unit)\r\n\t// can be incomplete if split up in multiple segments in multiple telegrams\r\n\tpublic applicationData: Buffer;\r\n\r\n\r\n}\r\n","\r\nexport class Tools {\r\n\r\n\tpublic static getStringFromByteArray(bytes: number[]): string {\r\n\t\treturn String.fromCharCode(...bytes);\r\n\t}\r\n\r\n\tpublic static getNumberFromByteArray(bytes: number[]): number {\r\n\t\tlet result = 0;\r\n\t\tfor(let i = bytes.length - 1, multiplier = 1; i >= 0; i--) {\r\n\t\t\tresult += bytes[i] * multiplier;\r\n\t\t\tmultiplier *= 256;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static getByteArrayFromHexString(hexString: string): number[] {\r\n\t\t// remove whitespaces\r\n\t\thexString = hexString.replace(/\\s+/g, '')\r\n\t\tlet bytes = [];\r\n\t\tfor (let c = 0; c < hexString.length; c += 2) {\r\n\t\t\tbytes.push(parseInt(hexString.substring(c, c + 2), 16));\r\n\t\t}\r\n\t\treturn bytes;\r\n\t}\r\n\r\n\tpublic static getHexStringFromByteArray(bytes: number[], withSpaces = false) {\r\n\t\tlet hexStrings = [];\r\n\t\tfor (let i = 0; i < bytes.length; i++) {\r\n\t\t\tconst current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];\r\n\t\t\thexStrings.push((current >>> 4).toString(16));\r\n\t\t\thexStrings.push((current & 0xF).toString(16));\r\n\t\t}\r\n\t\treturn hexStrings.join(withSpaces ? ' ' : '');\r\n\t}\r\n\r\n\tpublic static getNumberFromBuffer(buffer: Buffer, start = 0, end?: number): number {\r\n\t\tif(end == undefined) end = buffer.length;\r\n\t\tlet result = 0;\r\n\t\tfor(let i = end - 1, multiplier = 1; i >= start; i--) {\r\n\t\t\tresult += buffer[i] * multiplier;\r\n\t\t\tmultiplier *= 256;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n","module.exports = require(\"serialport\");","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { SerialPort } from 'serialport';\r\n//import * as crypto from \"crypto\";\r\n\r\nimport { Settings } from './utils/interfaces';\r\nimport { TelegramReader } from \"./lib/telegram-reader\";\r\nimport { ApplicationDataState, TelegramState } from \"./lib/enums\";\r\nimport { MultiTelegramReader } from \"./lib/multi-telegram-reader\";\r\n\r\nconst settings: Settings = {\r\n\t// serial port settings\r\n\t//port: '/dev/ttyUSB0'\r\n\tport: '/dev/serial/by-id/usb-Prolific_Technology_Inc._USB-Serial_Controller_DIDSt114J20-if00-port0',\r\n\tbaudRate: 2400,\r\n\tdataBits: 8,\r\n\tparity: 'none',\r\n\tstopBits: 1\r\n}\r\n\r\nfunction main() {\r\n\tconst port = new SerialPort({\r\n\t\tpath: settings.port,\r\n\t\tbaudRate: settings.baudRate,\r\n\t\tdataBits: settings.dataBits,\r\n\t\tparity: settings.parity,\r\n\t\tstopBits: settings.stopBits\r\n\t});\r\n\r\n\tconst telegramReader = new TelegramReader();\r\n\tconst multiTelegramReader = new MultiTelegramReader(telegramReader);\r\n\r\n\t// Read data that is available but keep the stream in \"paused mode\"\r\n\t// port.on('readable', function () {\r\n\t// \tconsole.log('Data:', port.read())\r\n\t// })\r\n\r\n\t// Switches the port into \"flowing mode\"\r\n\tport.on('data', function (serialPortData: Buffer) {\r\n\t\t//console.log('Data:', serialPortData)\r\n\t\t//console.log('real:', JSON.stringify(serialPortData));\r\n\r\n\t\t// let output = '';\r\n\t\t// for (let property in serialPortData) {\r\n\t\t// \t// @ts-ignore\r\n\t\t// \toutput += property + ': ' + serialPortData[property] + '; ';\r\n\t\t// }\r\n\t\t// console.log(output);\r\n\t\t//console.log([...serialPortData])\r\n\t\t//const telegramResultState = telegramReaderArray.addRawData([...serialPortData])\r\n\t\tconst telegramResultState = telegramReader.addRawData(serialPortData);\r\n\t\tif(telegramResultState == TelegramState.available) {\r\n\t\t\tconst telegrams = telegramReader.getTelegrams();\r\n\t\t\tconsole.log(JSON.stringify(telegrams))\r\n\r\n\t\t\tconst applicationDataUnitState = multiTelegramReader.addTelegrams(telegrams);\r\n\t\t\tif(applicationDataUnitState == ApplicationDataState.available) {\r\n\t\t\t\tconst applicationDataUnits = multiTelegramReader.getApplicationDataUnits();\r\n\t\t\t\tconsole.log(JSON.stringify(applicationDataUnits))\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\r\n\t// port.on('open', function() {\r\n\t// \t// open logic\r\n\t// })\r\n\r\n\tport.on('error', function(err) {\r\n\t\tconsole.error('Error: ', err.message)\r\n\t})\r\n}\r\n\r\n//console.log(crypto.getCiphers())\r\n\r\nmain();\r\n\r\n\r\n\r\n//Benchmark.bufferArrayBenchmark();\r\n\r\n\r\n\r\n\r\n"],"names":["static","applicationDataUnit","console","log","apduBuffer","toString","encryptedPayload","key","Buffer","from","iv","concat","systemTitle","frameCounter","length","alloc","fill","ctriv","decipher","crypto","createDecipheriv","update","final","decryptedPayload","setSystemTitle","rawData","this","_systemTitle","_systemTitleManufacturerId","subarray","first","padStart","second","rest","Tools","getNumberFromBuffer","_serialNumber","i","padLength","getNumberFromByteArray","systemTitleManufacturerId","setLength","buffer","start","end","undefined","_lengthField","_lengthFieldLength","_lengthEncryptedPayload","_lengthTotal","lengthFieldLength","lengthTotal","lengthEncryptedPayload","lengthField","securityControl","value","_securityControl","_securitySuiteId","_securityAuthentication","_securityEncryption","_securityKeySet","KeySet","broadcast","unicast","_securityCompression","securitySuiteId","securityAuthentication","securityEncryption","securityKeySet","securityCompression","setFrameCounter","_frameCounter","_frameCounterNumber","frameCounterNumber","ApplicationDataProvisioning","ApplicationDataState","TelegramState","MultiTelegramReader","constructor","telegramReader","provisioning","lastOnly","applicationDataUnits","currentApplicationDataUnit","ApplicationProtocolDataUnit","currentApplicationDataUnits","currentSequenceNumber","areApplicationDataUnitsAvailable","available","pending","addRawData","newData","telegrams","getTelegrams","addTelegrams","newTelegrams","newTelegram","sequenceNumber","applicationData","warn","resetSearch","cypheringService","CypheringServiceGeneralGloCiphering","offset","push","isLastSegment","ApplicationDataDecrypter","Decrypt","all","JSON","stringify","getApplicationDataUnits","ret","initialSize","maxSize","_length","allocUnsafe","reset","addBuffer","newBuffer","newBufferStart","newLength","error","maxSizeBuffer","copy","checkForNewStartIndex","startByte","newStartByteIndex","indexOf","asNumberArray","result","Array","TelegramReader","currentTelegram","Telegram","possibleStartFound","receiveBuffer","ReceiveBuffer","receiveBufferInitialSize","receiveBufferMaxSize","areTelegramsAvailable","sourceStart","checkTelegram","lengthData","stopByte","calculatedChecksum","checkChecksum","checkSum","controlField","addressField","controlInformationField","sourceAddress","destinationAddress","len","oldReceiveBuffer","sum","_lengthData","_lengthTransportData","_lengthApplicationData","_controlInformationField","_sequenceNumber","_isLastSegment","lengthTransportData","lengthApplicationData","ciField","bytes","String","fromCharCode","multiplier","hexString","replace","c","parseInt","substring","withSpaces","hexStrings","current","join","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","port","SerialPort","path","baudRate","dataBits","parity","stopBits","multiTelegramReader","on","serialPortData","err","message","main"],"sourceRoot":""}