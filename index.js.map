{"version":3,"file":"index.js","mappings":"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","sources":["webpack://smartmeter-mbus-dlms/./src/lib/application-protocol-data-unit.ts","webpack://smartmeter-mbus-dlms/./src/lib/enums.ts","webpack://smartmeter-mbus-dlms/./src/lib/multi-telegram-reader.ts","webpack://smartmeter-mbus-dlms/./src/lib/telegram-reader.ts","webpack://smartmeter-mbus-dlms/./src/lib/telegram.ts","webpack://smartmeter-mbus-dlms/./src/lib/tools.ts","webpack://smartmeter-mbus-dlms/external commonjs \"serialport\"","webpack://smartmeter-mbus-dlms/webpack/bootstrap","webpack://smartmeter-mbus-dlms/./src/smartmeter-mbus-dlms.ts"],"sourcesContent":["import { KeySet } from \"./enums\";\r\nimport { Tools } from \"./tools\";\r\n\r\nexport class ApplicationProtocolDataUnit {\r\n\tpublic cypheringService: number;\r\n\r\n\tpublic systemTitleLength: number;\r\n\r\n\tprivate _systemTitle: number[];\r\n\tprivate _systemTitleManufacturerId: string;\r\n\tprivate _serialNumber: string;\r\n\tpublic setSystemTitle(rawData: number[]) {\r\n\t\tthis. _systemTitle = rawData;\r\n\t\tthis._systemTitleManufacturerId = Tools.getStringFromByteArray(rawData.slice(0, 3));\r\n\r\n\t\t// serial number. at least for my KAIFA MA309M it seems to be:\r\n\t\tif(this._systemTitleManufacturerId == 'KFM') {\r\n\t\t\tlet first = rawData[3].toString(16).padStart(2, '0');\r\n\t\t\tlet second = rawData[4].toString(16).padStart(2, '0');\r\n\t\t\tlet rest = Tools.getNumberFromByteArray(rawData.slice(5, 8)).toString().padStart(7, '0');\r\n\t\t\tthis._serialNumber = first[0] + this._systemTitleManufacturerId + first[1] + second + rest;\r\n\t\t} else {\r\n\t\t\t// just a guess ...\r\n\t\t\t// if first letters after manufacturer ids are alphanumeric, treat it as characters\r\n\t\t\t// treat second part as decimal number\r\n\t\t\tlet i = 0;\r\n\t\t\twhile(i < 5 && rawData[3 + i] >= 48 && rawData[3 + i] <= 122 ) {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tlet first = '';\r\n\t\t\tlet second = ''\r\n\r\n\t\t\tif(i > 0) {\r\n\t\t\t\tfirst = Tools.getStringFromByteArray(rawData.slice(3, 3 + i));\r\n\t\t\t}\r\n\t\t\tif(3 + i < 8) {\r\n\t\t\t\tlet padLength = (256 ** (5 - i)).toString().length;\r\n\t\t\t\tsecond = Tools.getNumberFromByteArray(rawData.slice(3 + i, 8)).toString().padStart(padLength, '0');\r\n\t\t\t}\r\n\t\t\tthis._serialNumber = this._systemTitleManufacturerId + first + second;\r\n\t\t}\r\n\t}\r\n\tpublic get systemTitle(): number[] {\r\n\t\treturn this._systemTitle;\r\n\t}\r\n\tpublic get systemTitleManufacturerId(): string {\r\n\t\treturn this._systemTitleManufacturerId;\r\n\t}\r\n\r\n\tprivate _lengthFieldLength: number;\r\n\tprivate _lengthTotal: number;\r\n\tprivate _lengthEncryptedPayload: number;\r\n\tprivate _lengthField: number;\r\n\tpublic setLength(rawData: number[]): number {\r\n\t\t// length field is variable! 1 or 3 bytes long\r\n\t\tif(rawData[0] == 0x82) {\r\n\t\t\tthis._lengthField = Tools.getNumberFromByteArray(rawData.slice(1));\r\n\t\t\tthis._lengthFieldLength = 3;\r\n\t\t} else {\r\n\t\t\tthis._lengthField = rawData[0];\r\n\t\t\tthis._lengthFieldLength = 1;\r\n\t\t}\r\n\t\tthis._lengthEncryptedPayload = this._lengthField - 5;\r\n\t\tthis._lengthTotal = this._lengthField + this._lengthFieldLength + 10;\r\n\r\n\t\treturn this._lengthFieldLength;\r\n\t}\r\n\tpublic get lengthFieldLength(): number {\r\n\t\treturn this._lengthFieldLength;\r\n\t}\r\n\tpublic get lengthTotal(): number {\r\n\t\treturn this._lengthTotal;\r\n\t}\r\n\tpublic get lengthEncryptedPayload(): number {\r\n\t\treturn this._lengthEncryptedPayload;\r\n\t}\r\n\tpublic get lengthField(): number {\r\n\t\treturn this._lengthField;\r\n\t}\r\n\r\n\tprivate _securityControl: number;\r\n\tprivate _securitySuiteId: number;\r\n\tprivate _securityAuthentication: boolean;   // subfield \"A\"\r\n\tprivate _securityEncryption: boolean;       // subfield \"E\"\r\n\tprivate _securityKeySet: KeySet;           // subfield Key_Set\r\n\tprivate _securityCompression: boolean;\r\n\r\n\tpublic set securityControl(value: number) {\r\n\t\tthis._securityControl = value;\r\n\t\tthis._securitySuiteId =          this._securityControl & 0b00001111;\r\n\t\tthis._securityAuthentication =  (this._securityControl & 0b00010000) == 0b00010000;\r\n\t\tthis._securityEncryption =      (this._securityControl & 0b00100000) == 0b00100000;\r\n\t\tthis._securityKeySet =          (this._securityControl & 0b01000000) == 0b01000000 ? KeySet.broadcast : KeySet.unicast;\r\n\t\tthis._securityCompression =     (this._securityControl & 0b10000000) == 0b10000000;\r\n\t}\r\n\r\n\tpublic get securityControl(): number {\r\n\t\treturn this._securityControl;\r\n\t}\r\n\tpublic get securitySuiteId(): number {\r\n\t\treturn this._securitySuiteId;\r\n\t}\r\n\tpublic get securityAuthentication(): boolean {\r\n\t\treturn this._securityAuthentication;\r\n\t}\r\n\tpublic get securityEncryption(): boolean {\r\n\t\treturn this._securityEncryption;\r\n\t}\r\n\tpublic get securityKeySet(): KeySet {\r\n\t\treturn this._securityKeySet;\r\n\t}\r\n\tpublic get securityCompression(): boolean {\r\n\t\treturn this._securityCompression;\r\n\t}\r\n\r\n\r\n\tprivate _frameCounter: number;\r\n\tpublic setFrameCounter(rawData: number[]) {\r\n\t\tthis._frameCounter = Tools.getNumberFromByteArray(rawData);\r\n\t}\r\n\tpublic get frameCounter(): number {\r\n\t\treturn this._frameCounter;\r\n\t}\r\n\r\n\tpublic encryptedPayload: number[] = [];\r\n}\r\n","export const enum TelegramState {\r\n\tpending,\r\n\tavailable\r\n}\r\n\r\n// APDU: application protocol data unit\r\nexport const enum ApplicationDataState {\r\n\tpending,\r\n\tavailable = 1\r\n}\r\n\r\nexport const enum ApplicationDataProvisioning {\r\n\tlastOnly,\r\n\tall\r\n}\r\n\r\nexport const enum KeySet {\r\n\tunicast,\r\n\tbroadcast\r\n}\r\n","import { ApplicationDataProvisioning, ApplicationDataState, TelegramState } from \"./enums\";\r\nimport { TelegramReader } from \"./telegram-reader\";\r\nimport { Telegram } from \"./telegram\";\r\nimport { ApplicationProtocolDataUnit } from \"./application-protocol-data-unit\";\r\n\r\n// transport layer - reads APDUs (application protocol data unit) from one or more TPDU (transport protocol data unit)\r\nexport class MultiTelegramReader {\r\n\t// either use addRawData or addTelegrams\r\n\r\n\tprivate static readonly CypheringServiceGeneralGloCiphering = 0xDB;\r\n\r\n\tprivate applicationDataUnits: ApplicationProtocolDataUnit[] = [];\r\n\tprivate currentApplicationDataUnit = new ApplicationProtocolDataUnit();\r\n\r\n\tprivate currentSequenceNumber = 0;\r\n\r\n\t// telegramReader would not be needed if addTelegram() is not used, but then it has to be defined in the calling code anyway\r\n\tconstructor(private telegramReader: TelegramReader, private provisioning: ApplicationDataProvisioning = ApplicationDataProvisioning.lastOnly) {\r\n\t}\r\n\r\n\tpublic areApplicationDataUnitsAvailable(): ApplicationDataState {\r\n\t\treturn this.applicationDataUnits.length > 0 ? ApplicationDataState.available : ApplicationDataState.pending;\r\n\t}\r\n\r\n\tpublic addRawData(newData: number[]): ApplicationDataState {\r\n\t\tconst telegramStatus = this.telegramReader.addRawData(newData);\r\n\t\tif (telegramStatus == TelegramState.available) {\r\n\t\t\tconst telegrams = this.telegramReader.getTelegrams();\r\n\t\t\treturn this.addTelegrams(telegrams);\r\n\t\t}\r\n\t\treturn this.areApplicationDataUnitsAvailable();\r\n\t}\r\n\r\n\r\n\tpublic addTelegrams(newTelegrams: Telegram[]): ApplicationDataState {\r\n\t\tfor (let newTelegram of newTelegrams) {\r\n\t\t\tif (newTelegram.sequenceNumber != this.currentSequenceNumber) {\r\n\t\t\t\tconsole.log(`addTelegrams: Sequence number does not match. Start over. Expected: ${this.currentSequenceNumber}. Received: ${newTelegram.sequenceNumber}`);\r\n\t\t\t\tthis.resetSearch();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (newTelegram.sequenceNumber === 0) {\r\n\t\t\t\tif (newTelegram.applicationData.length < 17) {\r\n\t\t\t\t\tconsole.warn(`addTelegrams: Application data length of first telegram in sequence invalid. Start over. Expected: >= 17. Received: ${newTelegram.applicationData.length}`);\r\n\t\t\t\t\tthis.resetSearch();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.cypheringService = newTelegram.applicationData[0];\r\n\t\t\t\tif (this.currentApplicationDataUnit.cypheringService != MultiTelegramReader.CypheringServiceGeneralGloCiphering) {\r\n\t\t\t\t\tconsole.warn(`addTelegrams: Application data cyphering service invalid. Start over. Expected: ${MultiTelegramReader.CypheringServiceGeneralGloCiphering.toString(16)}. Received: ${this.currentApplicationDataUnit.cypheringService.toString(16)}`);\r\n\t\t\t\t\tthis.resetSearch();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.setSystemTitle(newTelegram.applicationData.slice(2, 10));\r\n\r\n\t\t\t\t// length filed has either 1 byte (length <= 127) or 3 bytes\r\n\t\t\t\tconst lengthFieldLength = this.currentApplicationDataUnit.setLength(newTelegram.applicationData.slice(10, 13));\r\n\t\t\t\tconst offset = lengthFieldLength - 1\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.securityControl = newTelegram.applicationData[11 + offset];\r\n\t\t\t\tthis.currentApplicationDataUnit.setFrameCounter(newTelegram.applicationData.slice(12 + offset, 16 + offset));\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.encryptedPayload = newTelegram.applicationData.slice(16 + offset);\r\n\t\t\t} else {\r\n\t\t\t\tthis.currentApplicationDataUnit.encryptedPayload.push(...newTelegram.applicationData);\r\n\t\t\t}\r\n\r\n\t\t\tif (!newTelegram.isLastSegment) {\r\n\t\t\t\tthis.currentSequenceNumber++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// last segment:\r\n\t\t\tif (this.currentApplicationDataUnit.lengthEncryptedPayload != this.currentApplicationDataUnit.encryptedPayload.length) {\r\n\t\t\t\tconsole.warn(`addTelegrams: Application data length of combined segments invalid. Start over. Expected: ${this.currentApplicationDataUnit.lengthEncryptedPayload}. Received: ${this.currentApplicationDataUnit.encryptedPayload.length}`);\r\n\t\t\t\tconsole.log(JSON.stringify(this.currentApplicationDataUnit));\r\n\t\t\t\tthis.resetSearch();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// everything seems to be fine:\r\n\t\t\tif(this.provisioning == ApplicationDataProvisioning.all) {\r\n\t\t\t\tthis.applicationDataUnits.push(this.currentApplicationDataUnit);\r\n\t\t\t} else {\r\n\t\t\t\tthis.applicationDataUnits = [this.currentApplicationDataUnit];\r\n\t\t\t}\r\n\t\t\tthis.resetSearch();\r\n\t\t}\r\n\t\treturn this.areApplicationDataUnitsAvailable();\r\n\t}\r\n\r\n\tpublic getApplicationDataUnits(): ApplicationProtocolDataUnit[] {\r\n\t\tconst ret = [...this.applicationDataUnits];\r\n\t\tthis.applicationDataUnits = [];\r\n\t\treturn ret;\r\n\t}\r\n\r\n\r\n\tprivate resetSearch() {\r\n\t\tthis.currentSequenceNumber = 0;\r\n\t\tthis.currentApplicationDataUnit = new ApplicationProtocolDataUnit();\r\n\t}\r\n}\r\n","import { TelegramState } from \"./enums\";\r\nimport { Telegram } from \"./telegram\";\r\n\r\n// data link layer\r\nexport class TelegramReader {\r\n\r\n\tstatic readonly startByte: number = 0x68;\r\n\tstatic readonly stopByte: number = 0x16;\r\n\r\n\tprivate currentTelegram = new Telegram();\r\n\tprivate possibleStartFound = false;\r\n\r\n\tprivate data: number[] = []\r\n\r\n\tprivate telegrams: Telegram[] = [];\r\n\r\n\r\n\tpublic areTelegramsAvailable(): TelegramState {\r\n\t\treturn this.telegrams.length > 0 ? TelegramState.available : TelegramState.pending;\r\n\t}\r\n\r\n\tprivate resetSearch() {\r\n\t\tthis.possibleStartFound =false;\r\n\t\tthis.currentTelegram = new Telegram();\r\n\t}\r\n\r\n\tpublic addRawData(newData: number[]): TelegramState {\r\n\t\t//console.log('addRawData', JSON.stringify(newData));\r\n\t\tif(!this.possibleStartFound) {\r\n\t\t\tconst startByteIndex = newData.indexOf(TelegramReader.startByte);\r\n\t\t\tif(startByteIndex < 0) {\r\n\t\t\t\treturn this.areTelegramsAvailable();\r\n\t\t\t}\r\n\t\t\tthis.possibleStartFound = true;\r\n\t\t\tif(startByteIndex > 0) {\r\n\t\t\t\tnewData = newData.slice(startByteIndex);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.data.push(...newData);\r\n\t\t// console.log('addRawData this.data', JSON.stringify(this.data), this.data.length);\r\n\t\treturn this.checkTelegram()\r\n\t}\r\n\r\n\t// only fetch them once!\r\n\tpublic getTelegrams(): Telegram[] {\r\n\t\tconst ret = [...this.telegrams];\r\n\t\tthis.telegrams = [];\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tprivate checkTelegram(): TelegramState {\r\n\t\tif(this.data.length < 4){\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\r\n\t\tif(this.currentTelegram.lengthData <= 0) {\r\n\t\t\t// check for telegram start sequence\r\n\t\t\tif(this.data[3] != TelegramReader.startByte || this.data[1] != this.data[2]) {\r\n\t\t\t\treturn this.checkForNewStartIndex(1);\r\n\t\t\t}\r\n\t\t\tthis.currentTelegram.lengthData = this.data[1];\r\n\t\t}\r\n\r\n\t\tif(this.currentTelegram.lengthData <= 3) {\r\n\t\t\t// control frame -> ignore\r\n\t\t\treturn this.checkForNewStartIndex(1);\r\n\t\t}\r\n\r\n\t\t// long frame\r\n\r\n\t\tif(this.data.length < this.currentTelegram.lengthTotal!) {\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\r\n\t\tif(this.data[this.currentTelegram.lengthTotal - 1] != TelegramReader.stopByte) {\r\n\t\t\treturn this.checkForNewStartIndex(1);\r\n\t\t}\r\n\r\n\t\tconst calculatedChecksum = this.checkChecksum();\r\n\t\tthis.currentTelegram.checkSum = this.data[this.currentTelegram.lengthTotal! - 2];\r\n\t\tif(calculatedChecksum != this.currentTelegram.checkSum) {\r\n\t\t\tconsole.warn('Invalid checksum', calculatedChecksum, this.currentTelegram.checkSum);\r\n\t\t\treturn this.checkForNewStartIndex(1);\r\n\t\t}\r\n\r\n\t\t// seems like everything is fine - set telegram fields\r\n\t\t// rest of data link layer data:\r\n\t\tthis.currentTelegram.controlField = this.data[4];   // should be 0x53 (83 dec)\r\n\t\tthis.currentTelegram.addressField = this.data[5];   // should be 0xFF (255 dec) Broadcast without reply\r\n\r\n\t\t// transport layer data:\r\n\t\tthis.currentTelegram.controlInformationField = this.data[6];\r\n\t\tthis.currentTelegram.sourceAddress = this.data[7];\r\n\t\tthis.currentTelegram.destinationAddress = this.data[8];\r\n\r\n\t\t// application layer data:\r\n\t\tthis.currentTelegram.applicationData = this.data.slice(9, this.currentTelegram.lengthTotal - 2);\r\n\r\n\t\t// reset for next telegram\r\n\t\tthis.telegrams.push(this.currentTelegram);\r\n\t\tconst len = this.currentTelegram.lengthTotal;\r\n\t\tthis.resetSearch();\r\n\t\tif(this.data.length > len) {\r\n\t\t\tthis.data = this.data.slice(len)\r\n\t\t\t// maybe we have another one:\r\n\t\t\treturn this.checkTelegram()\r\n\t\t}\r\n\r\n\t\tthis.data = [];\r\n\t\t//return this.areTelegramsAvailable()\r\n\t\treturn TelegramState.available;\r\n\t}\r\n\r\n\tprivate checkForNewStartIndex(firstPossibleIndex: number): TelegramState {\r\n\t\tthis.resetSearch();\r\n\t\tconst newStartByteIndex= this.data.indexOf(TelegramReader.startByte, firstPossibleIndex);\r\n\t\tif(newStartByteIndex < firstPossibleIndex) {\r\n\t\t\tthis.data = [];\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\t\tthis.data = this.data.slice(newStartByteIndex);\r\n\t\tthis.possibleStartFound = true;\r\n\t\treturn this.checkTelegram();\r\n\t}\r\n\r\n\tprivate checkChecksum() {\r\n\t\tconst start = 4;\r\n\t\tconst end = this.currentTelegram.lengthTotal! - 2;\r\n\t\tlet sum = 0;\r\n\t\tfor(let i = start; i < end; i++) {\r\n\t\t\tsum += this.data[i];\r\n\t\t}\r\n\t\treturn sum & 0xFF;\r\n\t}\r\n}\r\n","\r\n// represents data link, transport and application layer of single telegram\r\nexport class Telegram {\r\n\t// data link layer:\r\n\r\n\tprivate _lengthData: number = 0;\r\n\tprivate _lengthTotal: number = 0;\r\n\tprivate _lengthTransportData: number = 0;\r\n\tprivate _lengthApplicationData: number = 0;\r\n\r\n\tpublic set lengthData(len: number) {\r\n\t\tthis._lengthData = len;\r\n\t\tthis._lengthTotal = len + 6;   // 2x start, 2x len, checksum, stop\r\n\t\tthis._lengthTransportData = len - 2  // len user-data + C, A, CI field. CI is part of transport layer\r\n\t\tthis._lengthApplicationData = len - 5; // transport minus CI, STSAP, DTSAP\r\n\t}\r\n\tpublic get lengthData(): number {\r\n\t\treturn this._lengthData\r\n\t}\r\n\tpublic get lengthTotal(): number {\r\n\t\treturn this._lengthTotal\r\n\t}\r\n\tpublic get lengthTransportData(): number {\r\n\t\treturn this._lengthTransportData\r\n\t}\r\n\tpublic get lengthApplicationData(): number {\r\n\t\treturn this._lengthApplicationData\r\n\t}\r\n\r\n\tpublic checkSum: number = -1;\r\n\tpublic controlField: number = 0;    // C field\r\n\tpublic addressField: number = 0;    // A field\r\n\r\n\r\n\t// transport layer\r\n\t// TPDU (transport protocol data units)\r\n\r\n\tprivate _controlInformationField: number = 0;\r\n\tprivate _sequenceNumber: number = 0;\r\n\tprivate _isLastSegment: boolean = true; // or application data is only in one single telegram\r\n\r\n\tpublic set controlInformationField(ciField: number) {\r\n\t\tthis._controlInformationField = ciField;\r\n\t\tthis._sequenceNumber = this._controlInformationField & 0b00001111;\r\n\t\tthis._isLastSegment = (this._controlInformationField & 0b00010000) == 0b00010000;\r\n\t}\r\n\r\n\t// CI field:\r\n\tpublic get controlInformationField(): number {\r\n\t\treturn this._controlInformationField;\r\n\t}\r\n\r\n\tpublic get sequenceNumber(): number {\r\n\t\treturn this._sequenceNumber;\r\n\t}\r\n\r\n\tpublic get isLastSegment(): boolean {\r\n\t\treturn this._isLastSegment;\r\n\t}\r\n\r\n\tpublic sourceAddress: number = 0;           // STSAP (source transport service access point)\r\n\tpublic destinationAddress: number = 0;  \t// DTSAP (destination transport service access point)\r\n\r\n\r\n\t// application layer\r\n\t// APDU (application protocol data unit)\r\n\t// can be incomplete if split up in multiple segments in multiple telegrams\r\n\tpublic applicationData: number[] = [];\r\n\r\n\r\n}\r\n","\r\nexport class Tools {\r\n\r\n\tpublic static getStringFromByteArray(bytes: number[]): string {\r\n\t\treturn String.fromCharCode(...bytes);\r\n\t}\r\n\r\n\tpublic static getNumberFromByteArray(bytes: number[]): number {\r\n\t\tlet result = 0;\r\n\t\tfor(let i = bytes.length - 1, multiplicator = 1; i >= 0; i--) {\r\n\t\t\tresult += bytes[i] * multiplicator;\r\n\t\t\tmultiplicator *= 256;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static getByteArrayFromHexString(hexString: string): number[] {\r\n\t\t// remove whitespaces\r\n\t\thexString = hexString.replace(/\\s+/g, '')\r\n\t\tlet bytes = [];\r\n\t\tfor (let c = 0; c < hexString.length; c += 2) {\r\n\t\t\tbytes.push(parseInt(hexString.substring(c, c + 2), 16));\r\n\t\t}\r\n\t\treturn bytes;\r\n\t}\r\n\r\n\tpublic static getHexStringFromByteArray(bytes: number[], withSpaces = false) {\r\n\t\tlet hexStrings = [];\r\n\t\tfor (let i = 0; i < bytes.length; i++) {\r\n\t\t\tconst current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];\r\n\t\t\thexStrings.push((current >>> 4).toString(16));\r\n\t\t\thexStrings.push((current & 0xF).toString(16));\r\n\t\t}\r\n\t\treturn hexStrings.join(withSpaces ? ' ' : '');\r\n\t}\r\n\r\n\r\n}\r\n","module.exports = require(\"serialport\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { SerialPort } from 'serialport';\r\n//import * as crypto from \"crypto\";\r\n\r\nimport { Settings } from './utils/interfaces';\r\nimport { TelegramReader } from \"./lib/telegram-reader\";\r\nimport { ApplicationDataState, TelegramState } from \"./lib/enums\";\r\nimport { MultiTelegramReader } from \"./lib/multi-telegram-reader\";\r\n\r\nconst settings: Settings = {\r\n\t// serial port settings\r\n\t//port: '/dev/ttyUSB0'\r\n\tport: '/dev/serial/by-id/usb-Prolific_Technology_Inc._USB-Serial_Controller_DIDSt114J20-if00-port0',\r\n\tbaudRate: 2400,\r\n\tdataBits: 8,\r\n\tparity: 'none',\r\n\tstopBits: 1\r\n}\r\n\r\nfunction main() {\r\n\tconst port = new SerialPort({\r\n\t\tpath: settings.port,\r\n\t\tbaudRate: settings.baudRate,\r\n\t\tdataBits: settings.dataBits,\r\n\t\tparity: settings.parity,\r\n\t\tstopBits: settings.stopBits\r\n\t});\r\n\r\n\tconst telegramReader = new TelegramReader();\r\n\tconst multiTelegramReader = new MultiTelegramReader(telegramReader);\r\n\r\n\t// Read data that is available but keep the stream in \"paused mode\"\r\n\t// port.on('readable', function () {\r\n\t// \tconsole.log('Data:', port.read())\r\n\t// })\r\n\r\n\t// Switches the port into \"flowing mode\"\r\n\tport.on('data', function (serialPortData: Buffer) {\r\n\t\t//console.log('Data:', serialPortData)\r\n\t\t//console.log('real:', JSON.stringify(serialPortData));\r\n\r\n\t\t// let output = '';\r\n\t\t// for (let property in serialPortData) {\r\n\t\t// \t// @ts-ignore\r\n\t\t// \toutput += property + ': ' + serialPortData[property] + '; ';\r\n\t\t// }\r\n\t\t// console.log(output);\r\n\t\tconsole.log([...serialPortData])\r\n\t\tconst telegramResultState = telegramReader.addRawData([...serialPortData])\r\n\t\tif(telegramResultState == TelegramState.available) {\r\n\t\t\tconst telegrams = telegramReader.getTelegrams();\r\n\t\t\tconsole.log(JSON.stringify(telegrams))\r\n\r\n\t\t\tconst applicationDataUnitState = multiTelegramReader.addTelegrams(telegrams);\r\n\t\t\tif(applicationDataUnitState == ApplicationDataState.available) {\r\n\t\t\t\tconst applicationDataUnits = multiTelegramReader.getApplicationDataUnits();\r\n\t\t\t\tconsole.log(JSON.stringify(applicationDataUnits))\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n\r\n\r\n\t// port.on('open', function() {\r\n\t// \t// open logic\r\n\t// })\r\n\r\n\tport.on('error', function(err) {\r\n\t\tconsole.error('Error: ', err.message)\r\n\t})\r\n}\r\n\r\n//console.log(crypto.getCiphers())\r\n\r\nmain();\r\n\r\n\r\n\r\n//Benchmark.bufferArrayBenchmark();\r\n\r\n\r\n\r\n\r\n"],"names":["encryptedPayload","setSystemTitle","rawData","this","_systemTitle","_systemTitleManufacturerId","Tools","getStringFromByteArray","slice","first","toString","padStart","second","rest","getNumberFromByteArray","_serialNumber","i","padLength","length","systemTitle","systemTitleManufacturerId","setLength","_lengthField","_lengthFieldLength","_lengthEncryptedPayload","_lengthTotal","lengthFieldLength","lengthTotal","lengthEncryptedPayload","lengthField","securityControl","value","_securityControl","_securitySuiteId","_securityAuthentication","_securityEncryption","_securityKeySet","KeySet","broadcast","unicast","_securityCompression","securitySuiteId","securityAuthentication","securityEncryption","securityKeySet","securityCompression","setFrameCounter","_frameCounter","frameCounter","ApplicationDataProvisioning","ApplicationDataState","TelegramState","MultiTelegramReader","constructor","telegramReader","provisioning","lastOnly","applicationDataUnits","currentApplicationDataUnit","ApplicationProtocolDataUnit","currentSequenceNumber","areApplicationDataUnitsAvailable","available","pending","addRawData","newData","telegrams","getTelegrams","addTelegrams","newTelegrams","newTelegram","sequenceNumber","applicationData","console","warn","resetSearch","cypheringService","CypheringServiceGeneralGloCiphering","offset","push","isLastSegment","all","log","JSON","stringify","getApplicationDataUnits","ret","TelegramReader","currentTelegram","Telegram","possibleStartFound","data","areTelegramsAvailable","startByteIndex","indexOf","startByte","checkTelegram","lengthData","checkForNewStartIndex","stopByte","calculatedChecksum","checkChecksum","checkSum","controlField","addressField","controlInformationField","sourceAddress","destinationAddress","len","firstPossibleIndex","newStartByteIndex","end","sum","_lengthData","_lengthTransportData","_lengthApplicationData","_controlInformationField","_sequenceNumber","_isLastSegment","lengthTransportData","lengthApplicationData","ciField","static","bytes","String","fromCharCode","result","multiplicator","hexString","replace","c","parseInt","substring","withSpaces","hexStrings","current","join","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","port","SerialPort","path","baudRate","dataBits","parity","stopBits","multiTelegramReader","on","serialPortData","err","error","message","main"],"sourceRoot":""}