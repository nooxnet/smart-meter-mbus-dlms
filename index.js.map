{"version":3,"file":"index.js","mappings":"0HAAA,eAGA,SAEA,iCAEQA,eAAeC,GAKrB,MAAMC,EAAMC,OAAOC,KAAK,EAAAC,mBAAmBH,IAAK,OAC1CI,EAAKH,OAAOI,OAAO,CAACN,EAAoBO,YAAaP,EAAoBQ,eAYzEC,EAAQP,OAAOI,OAAO,CAACD,EAAIH,OAAOC,KAAK,WAAY,SACzD,IAAIO,EAAWC,EAAOC,iBAAiB,cAAeX,EAAKQ,GAE3D,MAAMI,EAASH,EAASG,OAAOb,EAAoBc,kBAG7CC,EAAQL,EAASK,QAGvBf,EAAoBgB,iBAAmBd,OAAOI,OAAO,CAACO,EAAQE,GAE/D,E,sGCpCD,cACA,QAEA,oCASQE,eAAeC,GAMrB,GALAC,KAAKC,aAAeF,EACpBC,KAAKE,2BAA6BH,EAAQI,SAAS,EAAG,GAAGC,WACzDJ,KAAKK,cAAe,EAAAC,MAAMC,oBAAoBR,EAAS,EAAG,GAGpB,OAAnCC,KAAKE,2BAAqC,CAC5C,IAAIM,EAAQT,EAAQ,GAAGK,SAAS,IAAIK,SAAS,EAAG,KAC5CC,EAASX,EAAQ,GAAGK,SAAS,IAAIK,SAAS,EAAG,KAC7CE,EAAO,EAAAL,MAAMC,oBAAoBR,EAAS,EAAG,GAAGK,WAAWK,SAAS,EAAG,KAC3ET,KAAKY,iBAAmBJ,EAAM,GAAKR,KAAKE,2BAA6BM,EAAM,GAAKE,EAASC,C,KACnF,CAIN,IAAIE,EAAI,EACR,KAAMA,EAAI,GAAKd,EAAQ,EAAIc,IAAM,IAAMd,EAAQ,EAAIc,IAAM,KACxDA,IAED,IAAIL,EAAQ,GACRE,EAAS,GAKb,GAHGG,EAAI,IACNL,EAAQT,EAAQI,SAAS,EAAG,EAAIU,GAAGT,YAEjC,EAAIS,EAAI,EAAG,CACb,IAAIC,EAAa,aAAQ,EAAID,GAAIT,WAAWW,OAC5CL,EAAS,EAAAJ,MAAMU,uBAAuB,IAAIjB,EAAQI,SAAS,EAAIU,EAAG,KAAKT,WAAWK,SAASK,EAAW,I,CAEvGd,KAAKY,iBAAmBZ,KAAKE,2BAA6BM,EAAQE,C,CAEpE,CACWtB,kBACV,OAAOY,KAAKC,YACb,CACWgB,gCACV,OAAOjB,KAAKE,0BACb,CACWgB,sBACV,OAAOlB,KAAKY,gBACb,CAMOO,UAAUC,EAAgBC,EAAQ,EAAGC,GAa3C,OAZUC,MAAPD,IAAkBA,EAAMF,EAAOL,QAEd,KAAjBK,EAAOC,IACTrB,KAAKwB,aAAe,EAAAlB,MAAMC,oBAAoBa,EAAQC,EAAQ,EAAGC,GACjEtB,KAAKyB,mBAAqB,IAE1BzB,KAAKwB,aAAeJ,EAAOC,GAC3BrB,KAAKyB,mBAAqB,GAE3BzB,KAAK0B,wBAA0B1B,KAAKwB,aAAe,EACnDxB,KAAK2B,aAAe3B,KAAKwB,aAAexB,KAAKyB,mBAAqB,GAE3DzB,KAAKyB,kBACb,CACWG,wBACV,OAAO5B,KAAKyB,kBACb,CACWI,kBACV,OAAO7B,KAAK2B,YACb,CACWG,6BACV,OAAO9B,KAAK0B,uBACb,CACWK,kBACV,OAAO/B,KAAKwB,YACb,CASWQ,oBAAgBC,GAC1BjC,KAAKkC,iBAAmBD,EACxBjC,KAAKmC,iBAAoD,GAAxBnC,KAAKkC,iBACtClC,KAAKoC,wBAAmE,KAAf,GAAxBpC,KAAKkC,kBACtClC,KAAKqC,oBAAmE,KAAf,GAAxBrC,KAAKkC,kBACtClC,KAAKsC,gBAAmE,KAAf,GAAxBtC,KAAKkC,kBAA+C,EAAAK,OAAOC,UAAY,EAAAD,OAAOE,QAC/GzC,KAAK0C,qBAAmE,MAAf,IAAxB1C,KAAKkC,iBACvC,CAEWF,sBACV,OAAOhC,KAAKkC,gBACb,CACWS,sBACV,OAAO3C,KAAKmC,gBACb,CACWS,6BACV,OAAO5C,KAAKoC,uBACb,CACWS,yBACV,OAAO7C,KAAKqC,mBACb,CACWS,qBACV,OAAO9C,KAAKsC,eACb,CACWS,0BACV,OAAO/C,KAAK0C,oBACb,CAIOM,gBAAgB5B,EAAgBC,EAAgB,EAAGC,GACzDtB,KAAKiD,cAAgB7B,EAAOjB,SAASkB,EAAOC,GAC5CtB,KAAKkD,oBAAsB,EAAA5C,MAAMC,oBAAoBP,KAAKiD,cAC3D,CACW5D,mBACV,OAAOW,KAAKiD,aACb,CACWE,yBACV,OAAOnD,KAAKkD,mBACb,E,aCpHD,IAAkBX,EALAa,EALAC,EANAC,E,uIAAAA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAC9B,uBACA,8BAIiBD,EAAA,EAAAA,uBAAA,EAAAA,qBAAoB,KACrC,uBACA,8BAGiBD,EAAA,EAAAA,8BAAA,EAAAA,4BAA2B,KAC5C,yBACA,kBAGiBb,EAAA,EAAAA,SAAA,EAAAA,OAAM,KACvB,uBACA,4B,8FClBD,cAGA,SACA,QAGA,MAAagB,EAYZC,YAAoBC,EAAwCC,EAA4C,EAAAN,4BAA4BO,UAAhH,KAAAF,eAAAA,EAAwC,KAAAC,aAAAA,EAPpD,KAAAE,qBAAsD,GACtD,KAAAC,2BAA6B,IAAI,EAAAC,4BACjC,KAAAC,4BAAwC,GAExC,KAAAC,sBAAwB,CAIhC,CAEOC,mCACN,OAAOjE,KAAK4D,qBAAqB7C,OAAS,EAAI,EAAAsC,qBAAqBa,UAAY,EAAAb,qBAAqBc,OACrG,CAEOC,WAAWC,GAEjB,GADuBrE,KAAKyD,eAAeW,WAAWC,IAChC,EAAAf,cAAcY,UAAW,CAC9C,MAAMI,EAAYtE,KAAKyD,eAAec,eACtC,OAAOvE,KAAKwE,aAAaF,E,CAE1B,OAAOtE,KAAKiE,kCACb,CAEOO,aAAaC,GACnB,IAAK,IAAIC,KAAeD,EACvB,GAAIC,EAAYC,gBAAkB3E,KAAKgE,sBAAvC,CAMA,GAAmC,IAA/BU,EAAYC,eAAsB,CACrC,GAAID,EAAYE,gBAAgB7D,OAAS,GAAI,CAC5C8D,QAAQC,KAAK,uHAAuHJ,EAAYE,gBAAgB7D,UAChKf,KAAK+E,cACL,Q,CAID,GADA/E,KAAK6D,2BAA2BmB,iBAAmBN,EAAYE,gBAAgB,GAC3E5E,KAAK6D,2BAA2BmB,kBAAoBzB,EAAoB0B,oCAAqC,CAChHJ,QAAQC,KAAK,mFAAmFvB,EAAoB0B,oCAAoC7E,SAAS,kBAAkBJ,KAAK6D,2BAA2BmB,iBAAiB5E,SAAS,OAC7OJ,KAAK+E,cACL,Q,CAGD/E,KAAK6D,2BAA2B/D,eAAe4E,EAAYE,gBAAgBzE,SAAS,EAAG,KAGvF,MACM+E,EADoBlF,KAAK6D,2BAA2B1C,UAAUuD,EAAYE,gBAAgB,GAAI,IACjE,EAEnC5E,KAAK6D,2BAA2B7B,gBAAkB0C,EAAYE,gBAAgB,GAAKM,GACnFlF,KAAK6D,2BAA2Bb,gBAAgB0B,EAAYE,gBAAiB,GAAKM,EAAQ,GAAKA,E,CAEhGlF,KAAK+D,4BAA4BoB,KAAKT,EAAYE,iBAE7CF,EAAYU,eAMjBpF,KAAK6D,2BAA2BwB,QAAUtG,OAAOI,OAAOa,KAAK+D,6BAC7D/D,KAAK6D,2BAA2BlE,iBAAmBK,KAAK6D,2BAA2BwB,QAAQlF,SAAS,GAAKH,KAAK6D,2BAA2BjC,kBAAoB,GAE7J,EAAA0D,yBAAyBC,QAAQvF,KAAK6D,4BAElC7D,KAAK6D,2BAA2B/B,wBAA0B9B,KAAK6D,2BAA2BlE,iBAAiBoB,QAQ5Gf,KAAK0D,cAAgB,EAAAN,4BAA4BoC,IACnDxF,KAAK4D,qBAAqBuB,KAAKnF,KAAK6D,4BAEpC7D,KAAK4D,qBAAuB,CAAC5D,KAAK6D,4BAEnC7D,KAAK+E,gBAZJF,QAAQC,KAAK,6FAA6F9E,KAAK6D,2BAA2B/B,qCAAqC9B,KAAK6D,2BAA2BlE,iBAAiBoB,UAEhOf,KAAK+E,gBAbL/E,KAAKgE,uB,MA/BLa,QAAQY,IAAI,uEAAuEzF,KAAKgE,oCAAoCU,EAAYC,kBACxI3E,KAAK+E,cAuDP,OAAO/E,KAAKiE,kCACb,CAEOyB,0BACN,MAAMC,EAAM,IAAI3F,KAAK4D,sBAErB,OADA5D,KAAK4D,qBAAuB,GACrB+B,CACR,CAEQZ,cACP/E,KAAKgE,sBAAwB,EAC7BhE,KAAK6D,2BAA6B,IAAI,EAAAC,4BACtC9D,KAAK+D,4BAA8B,EACpC,EApGD,wBAGyB,EAAAkB,oCAAsC,G,sFCV/D,sBAQC,YAA0BW,EAA4BC,EAAkB,MAA9C,KAAAD,YAAAA,EAA4B,KAAAC,QAAAA,EAL9C,KAAAC,QAAkB,EAMzB9F,KAAKoB,OAASrC,OAAOgH,YAAYH,EAClC,CANW7E,aACV,OAAOf,KAAK8F,OACb,CAMOE,QACNhG,KAAK8F,QAAU,CAChB,CAEOG,UAAUC,EAAmBC,EAAiB,GACpD,MAAMC,EAAYF,EAAUnF,OAASoF,EAAiBnG,KAAK8F,QAC3D,GAAGM,EAAYpG,KAAKoB,OAAOL,OAAQ,CAClC,GAAGqF,EAAYpG,KAAK6F,QAEnB,OADAhB,QAAQwB,MAAM,kDAAkDrG,KAAKoB,OAAOL,qBAAqBf,KAAK6F,4BAA4B7F,KAAK8F,6BAA6BI,EAAUnF,OAASoF,MAChL,EAER,GAAGnG,KAAKoB,OAAOL,OAASf,KAAK6F,QAAS,CACrChB,QAAQC,KAAK,kDAAkD9E,KAAKoB,OAAOL,2BAA2Bf,KAAK8F,6BAA6BI,EAAUnF,OAASoF,wBAAqCnG,KAAK6F,WACrM,MAAMS,EAAgBvH,OAAOgH,YAAY/F,KAAK6F,SAC3C7F,KAAK8F,QAAU,GACjB9F,KAAKoB,OAAOmF,KAAKD,EAAe,EAAG,EAAGtG,KAAK8F,SAE5C9F,KAAKoB,OAASkF,C,EAKhB,OAFAJ,EAAUK,KAAKvG,KAAKoB,OAAQpB,KAAK8F,QAASK,GAC1CnG,KAAK8F,QAAUM,GACR,CACR,CAEOI,sBAAsBC,GAC5B,MACMC,EAAmB1G,KAAKoB,OAAOuF,QAAQF,EADlB,GAE3B,OAAGC,EAFwB,GAG1B1G,KAAK8F,QAAU,GACR,IAER9F,KAAKoB,OAAOmF,KAAKvG,KAAKoB,OAAQ,EAAGsF,GACjC1G,KAAK8F,SAAWY,GACT,EACR,CAEOE,gBAIN,MAAMC,EAAmB,IAAIC,MAAM9G,KAAK8F,SACxC,IAAI,IAAIjF,EAAI,EAAGA,EAAIb,KAAK8F,QAASjF,IAChCgG,EAAOhG,GAAKb,KAAKoB,OAAOP,GAEzB,OAAOgG,CACR,E,6ICzDD,eAEA,MAAaE,EAOLnI,cACNmI,EAAmBC,KAAOC,EAAOC,IAAI,mBACrCH,EAAmBI,SAAWF,EAAOC,IAAI,uBACzCH,EAAmBK,SAAWH,EAAOC,IAAI,uBACzCH,EAAmBM,OAASJ,EAAOC,IAAI,qBACvCH,EAAmBO,SAAWL,EAAOC,IAAI,sBAC1C,EAbD,uBACe,EAAAF,KAAe,GACf,EAAAG,SAAmB,KACnB,EAAAC,SAA2B,EAC3B,EAAAC,OAAkC,OAClC,EAAAC,SAAwB,EAWvC,MAAarI,EAGLL,cACNK,EAAmBH,IAAMmI,EAAOC,IAAI,iBACrC,EALD,uBACe,EAAApI,IAAc,GAO7B,MAAayI,EAeL3I,cACN2I,EAAcC,SAAWP,EAAOC,IAAI,kBACpCK,EAAcE,aAAeR,EAAOC,IAAI,sBACxCK,EAAcG,wBAA0BT,EAAOC,IAAI,iCAEnDK,EAAcI,cAAgBV,EAAOC,IAAI,uBACzCK,EAAcK,sBAAwBX,EAAOC,IAAI,+BACjDK,EAAcM,eAAiBZ,EAAOC,IAAI,wBAC1CK,EAAcO,gBAAkBb,EAAOC,IAAI,yBAE3CK,EAAcQ,WAAad,EAAOC,IAAI,oBACtCK,EAAcS,YAAcf,EAAOC,IAAI,qBACvCK,EAAcU,oBAAsBhB,EAAOC,IAAI,4BAChD,EA5BD,kBAEe,EAAAM,SAAW,EACX,EAAAC,aAAe,EACf,EAAAC,wBAA0B,EA2BzC,MAAaQ,EAKLtJ,cACNmI,EAAmBoB,OACnBlJ,EAAmBkJ,OACnBZ,EAAcY,MACf,EATD,aACe,EAAAC,WAAarB,EACb,EAAAsB,WAAapJ,EACb,EAAAqJ,MAAQf,C,yFC7DvB,cACA,SACA,SAGA,MAAagB,EAAb,cAKS,KAAAC,gBAAkB,IAAI,EAAAC,SACtB,KAAAC,oBAAqB,EAIrB,KAAAC,cAAgB,IAAI,EAAAC,cAAcL,EAAeM,yBAA0BN,EAAeO,sBAE1F,KAAAxE,UAAwB,EA2HjC,CAzHQyE,wBACN,OAAO/I,KAAKsE,UAAUvD,OAAS,EAAI,EAAAuC,cAAcY,UAAY,EAAAZ,cAAca,OAC5E,CAEOC,WAAWC,GAEjB,IAAI2E,EAAc,EAClB,IAAIhJ,KAAK0I,mBAAoB,CAE5B,GADAM,EAAc3E,EAAQsC,QAAQ4B,EAAe9B,WAC1CuC,EAAc,EAChB,OAAOhJ,KAAK+I,wBAEb/I,KAAK0I,oBAAqB,C,CAE3B,OAAI1I,KAAK2I,cAAc1C,UAAU5B,EAAS2E,GAMnChJ,KAAKiJ,iBAJXjJ,KAAK2I,cAAc3C,QACZhG,KAAK+I,wBAId,CAGOxE,eACN,MAAMoB,EAAM,IAAI3F,KAAKsE,WAErB,OADAtE,KAAKsE,UAAY,GACVqB,CACR,CAEQZ,cACP/E,KAAK0I,oBAAoB,EACzB1I,KAAKwI,gBAAkB,IAAI,EAAAC,QAC5B,CAEQQ,gBACP,GAAGjJ,KAAK2I,cAAc5H,OAAS,EAC9B,OAAOf,KAAK+I,wBAGb,GAAG/I,KAAKwI,gBAAgBU,YAAc,EAAG,CAExC,GAAGlJ,KAAK2I,cAAcvH,OAAO,IAAMmH,EAAe9B,WAAazG,KAAK2I,cAAcvH,OAAO,IAAMpB,KAAK2I,cAAcvH,OAAO,GACxH,OAAOpB,KAAKwG,wBAEbxG,KAAKwI,gBAAgBU,WAAalJ,KAAK2I,cAAcvH,OAAO,E,CAG7D,GAAGpB,KAAKwI,gBAAgBU,YAAc,EAErC,OAAOlJ,KAAKwG,wBAKb,GAAGxG,KAAK2I,cAAc5H,OAASf,KAAKwI,gBAAgB3G,YACnD,OAAO7B,KAAK+I,wBAGb,GAAG/I,KAAK2I,cAAcvH,OAAOpB,KAAKwI,gBAAgB3G,YAAc,IAAM0G,EAAeY,SACpF,OAAOnJ,KAAKwG,wBAGb,MAAM4C,EAAqBpJ,KAAKqJ,gBAEhC,GADArJ,KAAKwI,gBAAgBc,SAAWtJ,KAAK2I,cAAcvH,OAAOpB,KAAKwI,gBAAgB3G,YAAc,GAC1FuH,GAAsBpJ,KAAKwI,gBAAgBc,SAE7C,OADAzE,QAAQC,KAAK,mBAAoBsE,EAAoBpJ,KAAKwI,gBAAgBc,UACnEtJ,KAAKwG,wBAIbxG,KAAKwI,gBAAgBe,YAAcvJ,KAAK2I,cAAcvH,OAAOjB,SAAS,EAAGH,KAAKwI,gBAAgB3G,aAG9F7B,KAAKwI,gBAAgBgB,aAAexJ,KAAK2I,cAAcvH,OAAO,GAC9DpB,KAAKwI,gBAAgBiB,aAAezJ,KAAK2I,cAAcvH,OAAO,GAG9DpB,KAAKwI,gBAAgBkB,wBAA0B1J,KAAK2I,cAAcvH,OAAO,GACzEpB,KAAKwI,gBAAgBmB,cAAgB3J,KAAK2I,cAAcvH,OAAO,GAC/DpB,KAAKwI,gBAAgBoB,mBAAqB5J,KAAK2I,cAAcvH,OAAO,GAGpEpB,KAAKwI,gBAAgB5D,gBAAkB5E,KAAK2I,cAAcvH,OAAOjB,SAAS,EAAGH,KAAKwI,gBAAgB3G,YAAc,GAGhH7B,KAAKsE,UAAUa,KAAKnF,KAAKwI,iBACzB,MAAMqB,EAAM7J,KAAKwI,gBAAgB3G,YAEjC,GADA7B,KAAK+E,cACF/E,KAAK2I,cAAc5H,QAAU8I,EAE/B,OADA7J,KAAK2I,cAAgB,IAAI,EAAAC,cAAcL,EAAeM,yBAA0BN,EAAeO,sBACxF,EAAAxF,cAAcY,UAItB,MAAM4F,EAAmB9J,KAAK2I,cAI9B,OAHA3I,KAAK2I,cAAgB,IAAI,EAAAC,cAAcL,EAAeM,yBAA0BN,EAAeO,sBAC/F9I,KAAK2I,cAAc1C,UAAU6D,EAAiB1I,OAAOjB,SAAS,EAAG2J,EAAiB/I,QAAS8I,GAEpF7J,KAAKiJ,eACb,CAEQzC,wBAEP,OADAxG,KAAK+E,cACD/E,KAAK2I,cAAcnC,sBAAsB+B,EAAe9B,YAG5DzG,KAAK0I,oBAAqB,EAEnB1I,KAAKiJ,iBAJJjJ,KAAK+I,uBAKd,CAEQM,gBACP,MACM/H,EAAMtB,KAAKwI,gBAAgB3G,YAAe,EAChD,IAAIkI,EAAM,EACV,IAAI,IAAIlJ,EAHM,EAGKA,EAAIS,EAAKT,IAC3BkJ,GAAO/J,KAAK2I,cAAcvH,OAAOP,GAElC,OAAa,IAANkJ,CACR,EAtID,mBAEiB,EAAAtD,UAAoB,IACpB,EAAA0C,SAAmB,GAKnB,EAAAN,yBAA2B,IAC3B,EAAAC,qBAAuB,I,iFCZxC,+BAGS,KAAAkB,YAAsB,EACtB,KAAArI,aAAuB,EACvB,KAAAsI,qBAA+B,EAC/B,KAAAC,uBAAiC,EAqBlC,KAAAZ,UAAoB,EACpB,KAAAE,aAAuB,EACvB,KAAAC,aAAuB,EAMtB,KAAAU,yBAAmC,EACnC,KAAAC,gBAA0B,EAC1B,KAAAC,gBAA0B,EAkB3B,KAAAV,cAAwB,EACxB,KAAAC,mBAA6B,CASrC,CAzDYV,eAAWW,GACrB7J,KAAKgK,YAAcH,EACnB7J,KAAK2B,aAAekI,EAAM,EAC1B7J,KAAKiK,qBAAuBJ,EAAM,EAClC7J,KAAKkK,uBAAyBL,EAAM,CACrC,CACWX,iBACV,OAAOlJ,KAAKgK,WACb,CACWnI,kBACV,OAAO7B,KAAK2B,YACb,CACW2I,0BACV,OAAOtK,KAAKiK,oBACb,CACWM,4BACV,OAAOvK,KAAKkK,sBACb,CAeWR,4BAAwBc,GAClCxK,KAAKmK,yBAA2BK,EAChCxK,KAAKoK,gBAAkD,GAAhCpK,KAAKmK,yBAC5BnK,KAAKqK,eAAiE,KAAf,GAAhCrK,KAAKmK,yBAC7B,CACWT,8BACV,OAAO1J,KAAKmK,wBACb,CACWxF,qBACV,OAAO3E,KAAKoK,eACb,CACWhF,oBACV,OAAOpF,KAAKqK,cACb,E,6ECtDD,cAEQzL,8BAA8B6L,GACpC,OAAOC,OAAOC,gBAAgBF,EAC/B,CAEO7L,8BAA8B6L,GACpC,IAAI5D,EAAS,EACb,IAAI,IAAIhG,EAAI4J,EAAM1J,OAAS,EAAG6J,EAAa,EAAG/J,GAAK,EAAGA,IACrDgG,GAAU4D,EAAM5J,GAAK+J,EACrBA,GAAc,IAEf,OAAO/D,CACR,CAEOjI,iCAAiCiM,GAEvCA,EAAYA,EAAUC,QAAQ,OAAQ,IACtC,IAAIL,EAAQ,GACZ,IAAK,IAAIM,EAAI,EAAGA,EAAIF,EAAU9J,OAAQgK,GAAK,EAC1CN,EAAMtF,KAAK6F,SAASH,EAAUI,UAAUF,EAAGA,EAAI,GAAI,KAEpD,OAAON,CACR,CAEO7L,iCAAiC6L,EAAiBS,GAAa,GACrE,IAAIC,EAAa,GACjB,IAAK,IAAItK,EAAI,EAAGA,EAAI4J,EAAM1J,OAAQF,IAAK,CACtC,MAAMuK,EAAUX,EAAM5J,GAAK,EAAI4J,EAAM5J,GAAK,IAAM4J,EAAM5J,GACtDsK,EAAWhG,MAAMiG,IAAY,GAAGhL,SAAS,KACzC+K,EAAWhG,MAAgB,GAAViG,GAAehL,SAAS,I,CAE1C,OAAO+K,EAAWE,KAAKH,EAAa,IAAM,GAC3C,CAEOtM,2BAA2BwC,EAAgBC,EAAQ,EAAGC,GAClDC,MAAPD,IAAkBA,EAAMF,EAAOL,QAClC,IAAI8F,EAAS,EACb,IAAI,IAAIhG,EAAIS,EAAM,EAAGsJ,EAAa,EAAG/J,GAAKQ,EAAOR,IAChDgG,GAAUzF,EAAOP,GAAK+J,EACtBA,GAAc,IAEf,OAAO/D,CACR,E,UC5CDyE,EAAOC,QAAUC,QAAQ,S,UCAzBF,EAAOC,QAAUC,QAAQ,a,UCAzBF,EAAOC,QAAUC,QAAQ,S,GCCrBC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBpK,IAAjBqK,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,CAAC,GAOX,OAHAM,EAAoBF,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,OACf,C,oFCtBA,eAEA,SACA,QACA,SACA,SAIA,IAMIvE,EANA8E,EAAiC,GACjCC,EAAyB,EACzBC,EAAsB,EACtBC,EAAgB,EAChBC,EAA2B,EAC3BC,GAAiB,GAGrB,WACC,EAAAjE,SAASC,OA4CTgE,EAAiB,EAAA5E,cAAcC,SAAW,GAAK,EAAAD,cAAcE,aAAe,GAAK,EAAAF,cAAcG,wBAA0B,EAzCzHV,EAAO,IAAI,EAAAoF,WAAW,CACrBC,KAAM,EAAAtF,mBAAmBC,KACzBG,SAAU,EAAAJ,mBAAmBI,SAC7BC,SAAU,EAAAL,mBAAmBK,SAC7BC,OAAQ,EAAAN,mBAAmBM,OAC3BC,SAAU,EAAAP,mBAAmBO,WAG9B,MAAM7D,EAAiB,IAAI,EAAA8E,eACrB+D,EAAsB,IAAI,EAAA/I,oBAAoBE,GAEpDuD,EAAKuF,GAAG,QAAQ,SAAUC,GAQzB,GAPG,EAAAjF,cAAcI,eAgCnB,SAA2B6E,GACvB,EAAAjF,cAAcK,uBAAyB,GAIb,GAA1BmE,GAA+BS,EAAezL,QAAU,EAAAwG,cAAcK,sBAHxE/C,QAAQY,IAAI+G,EAAepM,SAAS,SAOrC0L,EAAqB3G,KAAKqH,GAC1BT,GAA0BS,EAAezL,OACtCgL,EAAyB,EAAAxE,cAAcK,wBAG1C/C,QAAQY,IAAI1G,OAAOI,OAAO2M,GAAsB1L,SAAS,QACzD0L,EAAuB,GACvBC,EAAyB,GAC1B,CAhDGU,CAAkBD,GAGnBR,GAAuBQ,EAAezL,OAEV0C,EAAeW,WAAWoI,IAC5B,EAAAlJ,cAAcY,UAAW,CAClD,MAAMI,EAAYb,EAAec,eAKjC,GAJA0H,GAAiB3H,EAAUvD,OA0C9B,SAAsBuD,GAClB,EAAAiD,cAAcM,gBAChBvD,EAAUoI,SAASC,GAAM9H,QAAQY,IAAI,aAAckH,EAAEpD,YAAYnJ,SAAS,UAExE,EAAAmH,cAAcO,iBAChBxD,EAAUoI,SAASC,GAAM9H,QAAQY,IAAI,aAAckH,IAErD,CAhDGC,CAAatI,GAEoBgI,EAAoB9H,aAAaF,IACnC,EAAAjB,qBAAqBa,UAAW,CAC9D,MAAMN,EAAuB0I,EAAoB5G,0BACjDwG,GAA4BtI,EAAqB7C,OA6CrD,SAAiC6C,GAC7B,EAAA2D,cAAcQ,YAChBnE,EAAqB8I,SAASG,GAAShI,QAAQY,IAAI,SAAUoH,EAAKxH,QAAQjF,SAAS,UAEjF,EAAAmH,cAAcS,aAChBpE,EAAqB8I,SAASG,GAAShI,QAAQY,IAAI,SAAUoH,KAE3D,EAAAtF,cAAcU,qBAChBrE,EAAqB8I,SAASG,GAAShI,QAAQY,IAAI,2BAA4BoH,EAAKhN,iBAAiBO,SAAS,SAEhH,CAtDI0M,CAAwBlJ,E,EAIvBuI,KAqD2B,GAA1B,EAAA5E,cAAcC,UAAiBwE,EAAsB,EAAAzE,cAAcC,YACxC,GAA9B,EAAAD,cAAcE,cAAqBwE,EAAgB,EAAA1E,cAAcE,gBACxB,GAAzC,EAAAF,cAAcG,yBAAgCwE,EAA2B,EAAA3E,cAAcG,2BAItF,EAAAH,cAAcI,eAAiB,EAAAJ,cAAcK,sBAAwB,GAAKmE,EAAyB,GACrGlH,QAAQY,IAAI1G,OAAOI,OAAO2M,GAAsB1L,SAAS,QAG1D4G,EAAK+F,OAAO1G,IACRA,GAAOxB,QAAQwB,MAAMA,GACxB2G,QAAQC,KAAK,EAAE,IAGhBpI,QAAQY,IAAI,+CAA+C,EAAA8B,cAAcC,4BAA4B,EAAAD,cAAcE,6CAA6C,EAAAF,cAAcG,qCAnE9K,IAEAV,EAAKuF,GAAG,SAAS,SAASW,GACzBrI,QAAQwB,MAAM,sBAAuB6G,EAAIC,QAC1C,GACD,CAiEAC,E","sources":["webpack://smartmeter-mbus-dlms/./src/lib/application-data-decrypter.ts","webpack://smartmeter-mbus-dlms/./src/lib/application-protocol-data-unit.ts","webpack://smartmeter-mbus-dlms/./src/lib/enums.ts","webpack://smartmeter-mbus-dlms/./src/lib/multi-telegram-reader.ts","webpack://smartmeter-mbus-dlms/./src/lib/receive-buffer.ts","webpack://smartmeter-mbus-dlms/./src/lib/settings/setting-classes.ts","webpack://smartmeter-mbus-dlms/./src/lib/telegram-reader.ts","webpack://smartmeter-mbus-dlms/./src/lib/telegram.ts","webpack://smartmeter-mbus-dlms/./src/lib/tools.ts","webpack://smartmeter-mbus-dlms/external commonjs \"config\"","webpack://smartmeter-mbus-dlms/external commonjs \"serialport\"","webpack://smartmeter-mbus-dlms/external node-commonjs \"crypto\"","webpack://smartmeter-mbus-dlms/webpack/bootstrap","webpack://smartmeter-mbus-dlms/./src/smartmeter-mbus-dlms.ts"],"sourcesContent":["import * as crypto from \"crypto\";\r\n\r\nimport { ApplicationProtocolDataUnit } from \"./application-protocol-data-unit\";\r\nimport { DecryptionSettings } from \"./settings/setting-classes\";\r\n\r\nexport class ApplicationDataDecrypter {\r\n\r\n\tpublic static Decrypt(applicationDataUnit: ApplicationProtocolDataUnit): void {\r\n\t\t//console.log(applicationDataUnit);\r\n\t\t//console.log('applicationDataUnit.apduBuffer hex', applicationDataUnit.apduBuffer.toString('hex'))\r\n\t\t//console.log('applicationDataUnit.encryptedPayload hex', applicationDataUnit.encryptedPayload.toString('hex'))\r\n\r\n\t\tconst key = Buffer.from(DecryptionSettings.key, 'hex');\r\n\t\tconst iv = Buffer.concat([applicationDataUnit.systemTitle, applicationDataUnit.frameCounter]);\r\n\r\n\t\t// the documentation says that the smart meter uses 'aes-128-gcm' but actually without authTag.\r\n\t\t// node crypto gets the encrypted data on \"update\" if a 12 byte authTag with all \"00\" is used,\r\n\t\t// but it fails on \"final\".\r\n\t\t//let authTagLength = 12;\r\n\t\t//const authTag = Buffer.alloc(authTagLength);\r\n\t\t//authTag.fill(0);\r\n\t\t//let decipher = crypto.createDecipheriv('aes-128-gcm', key, iv, { authTagLength });\r\n\t\t//decipher.setAuthTag(authTag);\r\n\r\n\t\t// workaround: use 'aes-128-ctr' with additional 4 bytes of iv like so:\r\n\t\tconst ctrIv = Buffer.concat([iv, Buffer.from(\"00000002\", 'hex')]);\r\n\t\tlet decipher = crypto.createDecipheriv('aes-128-ctr', key, ctrIv);\r\n\r\n\t\tconst update = decipher.update(applicationDataUnit.encryptedPayload);\r\n\t\t//console.log('update', update.toString('hex'));\r\n\r\n\t\tconst final = decipher.final();\r\n\t\t//console.log('final', final.toString('hex'));\r\n\r\n\t\tapplicationDataUnit.decryptedPayload = Buffer.concat([update, final]);\r\n\t\t//console.log(`Decrypted: \\t${applicationDataUnit.decryptedPayload.toString('hex')}`);\r\n\t}\r\n}\r\n","import { KeySet } from \"./enums\";\r\nimport { Tools } from \"./tools\";\r\n\r\nexport class ApplicationProtocolDataUnit {\r\n\tpublic cypheringService: number;\r\n\r\n\tpublic systemTitleLength: number;\r\n\r\n\tprivate _systemTitle: Buffer;\r\n\tprivate _systemTitleManufacturerId: string;\r\n\tprivate _systemTitleText: string;\r\n\tprivate _serialNumber: number;\r\n\tpublic setSystemTitle(rawData: Buffer) {\r\n\t\tthis._systemTitle = rawData;\r\n\t\tthis._systemTitleManufacturerId = rawData.subarray(0, 3).toString();\r\n\t\tthis._serialNumber= Tools.getNumberFromBuffer(rawData, 5, 8);\r\n\r\n\t\t// system title text. at least for my KAIFA MA309M it seems to be:\r\n\t\tif(this._systemTitleManufacturerId == 'KFM') {\r\n\t\t\tlet first = rawData[3].toString(16).padStart(2, '0');\r\n\t\t\tlet second = rawData[4].toString(16).padStart(2, '0');\r\n\t\t\tlet rest = Tools.getNumberFromBuffer(rawData, 5, 8).toString().padStart(7, '0');\r\n\t\t\tthis._systemTitleText = first[0] + this._systemTitleManufacturerId + first[1] + second + rest;\r\n\t\t} else {\r\n\t\t\t// just a guess ...\r\n\t\t\t// if first letters after manufacturer ids are alphanumeric, treat it as characters\r\n\t\t\t// treat second part as decimal number\r\n\t\t\tlet i = 0;\r\n\t\t\twhile(i < 5 && rawData[3 + i] >= 48 && rawData[3 + i] <= 122 ) {\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t\tlet first = '';\r\n\t\t\tlet second = ''\r\n\r\n\t\t\tif(i > 0) {\r\n\t\t\t\tfirst = rawData.subarray(3, 3 + i).toString();\r\n\t\t\t}\r\n\t\t\tif(3 + i < 8) {\r\n\t\t\t\tlet padLength = (256 ** (5 - i)).toString().length;\r\n\t\t\t\tsecond = Tools.getNumberFromByteArray([...rawData.subarray(3 + i, 8)]).toString().padStart(padLength, '0');\r\n\t\t\t}\r\n\t\t\tthis._systemTitleText = this._systemTitleManufacturerId + first + second;\r\n\t\t}\r\n\t}\r\n\tpublic get systemTitle(): Buffer {\r\n\t\treturn this._systemTitle;\r\n\t}\r\n\tpublic get systemTitleManufacturerId(): string {\r\n\t\treturn this._systemTitleManufacturerId;\r\n\t}\r\n\tpublic get systemTitleText(): string {\r\n\t\treturn this._systemTitleText;\r\n\t}\r\n\r\n\tprivate _lengthFieldLength: number;\r\n\tprivate _lengthTotal: number;\r\n\tprivate _lengthEncryptedPayload: number;\r\n\tprivate _lengthField: number;\r\n\tpublic setLength(buffer: Buffer, start = 0, end?: number): number {\r\n\t\tif(end == undefined) end = buffer.length;\r\n\t\t// length of length field is variable: 1 or 3 bytes long\r\n\t\tif(buffer[start] == 0x82) {     // 130\r\n\t\t\tthis._lengthField = Tools.getNumberFromBuffer(buffer, start + 1, end);\r\n\t\t\tthis._lengthFieldLength = 3;\r\n\t\t} else {\r\n\t\t\tthis._lengthField = buffer[start];\r\n\t\t\tthis._lengthFieldLength = 1;\r\n\t\t}\r\n\t\tthis._lengthEncryptedPayload = this._lengthField - 5;\r\n\t\tthis._lengthTotal = this._lengthField + this._lengthFieldLength + 10;\r\n\r\n\t\treturn this._lengthFieldLength;\r\n\t}\r\n\tpublic get lengthFieldLength(): number {\r\n\t\treturn this._lengthFieldLength;\r\n\t}\r\n\tpublic get lengthTotal(): number {\r\n\t\treturn this._lengthTotal;\r\n\t}\r\n\tpublic get lengthEncryptedPayload(): number {\r\n\t\treturn this._lengthEncryptedPayload;\r\n\t}\r\n\tpublic get lengthField(): number {\r\n\t\treturn this._lengthField;\r\n\t}\r\n\r\n\tprivate _securityControl: number;\r\n\tprivate _securitySuiteId: number;\r\n\tprivate _securityAuthentication: boolean;   // subfield \"A\"\r\n\tprivate _securityEncryption: boolean;       // subfield \"E\"\r\n\tprivate _securityKeySet: KeySet;           // subfield Key_Set\r\n\tprivate _securityCompression: boolean;\r\n\r\n\tpublic set securityControl(value: number) {\r\n\t\tthis._securityControl = value;\r\n\t\tthis._securitySuiteId =          this._securityControl & 0b00001111;\r\n\t\tthis._securityAuthentication =  (this._securityControl & 0b00010000) == 0b00010000;\r\n\t\tthis._securityEncryption =      (this._securityControl & 0b00100000) == 0b00100000;\r\n\t\tthis._securityKeySet =          (this._securityControl & 0b01000000) == 0b01000000 ? KeySet.broadcast : KeySet.unicast;\r\n\t\tthis._securityCompression =     (this._securityControl & 0b10000000) == 0b10000000;\r\n\t}\r\n\r\n\tpublic get securityControl(): number {\r\n\t\treturn this._securityControl;\r\n\t}\r\n\tpublic get securitySuiteId(): number {\r\n\t\treturn this._securitySuiteId;\r\n\t}\r\n\tpublic get securityAuthentication(): boolean {\r\n\t\treturn this._securityAuthentication;\r\n\t}\r\n\tpublic get securityEncryption(): boolean {\r\n\t\treturn this._securityEncryption;\r\n\t}\r\n\tpublic get securityKeySet(): KeySet {\r\n\t\treturn this._securityKeySet;\r\n\t}\r\n\tpublic get securityCompression(): boolean {\r\n\t\treturn this._securityCompression;\r\n\t}\r\n\r\n\tprivate _frameCounter: Buffer\r\n\tprivate _frameCounterNumber: number;\r\n\tpublic setFrameCounter(buffer: Buffer, start: number = 0, end?: number) {\r\n\t\tthis._frameCounter = buffer.subarray(start, end);\r\n\t\tthis._frameCounterNumber = Tools.getNumberFromBuffer(this._frameCounter);\r\n\t}\r\n\tpublic get frameCounter(): Buffer {\r\n\t\treturn this._frameCounter;\r\n\t}\r\n\tpublic get frameCounterNumber(): number {\r\n\t\treturn this._frameCounterNumber;\r\n\t}\r\n\r\n\tpublic encryptedPayload: Buffer;\r\n\r\n\tpublic decryptedPayload: Buffer;\r\n\r\n\t// raw APDU data\r\n\tpublic apduRaw: Buffer;\r\n}\r\n","export const enum TelegramState {\r\n\tpending,\r\n\tavailable\r\n}\r\n\r\n// APDU: application protocol data unit\r\nexport const enum ApplicationDataState {\r\n\tpending,\r\n\tavailable = 1\r\n}\r\n\r\nexport const enum ApplicationDataProvisioning {\r\n\tlastOnly,\r\n\tall\r\n}\r\n\r\nexport const enum KeySet {\r\n\tunicast,\r\n\tbroadcast\r\n}\r\n","import { ApplicationDataProvisioning, ApplicationDataState, TelegramState } from \"./enums\";\r\nimport { TelegramReader } from \"./telegram-reader\";\r\nimport { Telegram } from \"./telegram\";\r\nimport { ApplicationProtocolDataUnit } from \"./application-protocol-data-unit\";\r\nimport { ApplicationDataDecrypter } from \"./application-data-decrypter\";\r\n\r\n// transport layer - reads APDUs (application protocol data unit) from one or more TPDU (transport protocol data unit)\r\nexport class MultiTelegramReader {\r\n\t// either use addRawData or addTelegrams - not both\r\n\r\n\tprivate static readonly CypheringServiceGeneralGloCiphering = 0xDB;\r\n\r\n\tprivate applicationDataUnits: ApplicationProtocolDataUnit[] = [];\r\n\tprivate currentApplicationDataUnit = new ApplicationProtocolDataUnit();\r\n\tprivate currentApplicationDataUnits: Buffer[] = [];\r\n\r\n\tprivate currentSequenceNumber = 0;\r\n\r\n\t// telegramReader would not be needed if addTelegram() is not used, but then it has to be defined in the calling code anyway\r\n\tconstructor(private telegramReader: TelegramReader, private provisioning: ApplicationDataProvisioning = ApplicationDataProvisioning.lastOnly) {\r\n\t}\r\n\r\n\tpublic areApplicationDataUnitsAvailable(): ApplicationDataState {\r\n\t\treturn this.applicationDataUnits.length > 0 ? ApplicationDataState.available : ApplicationDataState.pending;\r\n\t}\r\n\r\n\tpublic addRawData(newData: Buffer): ApplicationDataState {\r\n\t\tconst telegramStatus = this.telegramReader.addRawData(newData);\r\n\t\tif (telegramStatus == TelegramState.available) {\r\n\t\t\tconst telegrams = this.telegramReader.getTelegrams();\r\n\t\t\treturn this.addTelegrams(telegrams);\r\n\t\t}\r\n\t\treturn this.areApplicationDataUnitsAvailable();\r\n\t}\r\n\r\n\tpublic addTelegrams(newTelegrams: Telegram[]): ApplicationDataState {\r\n\t\tfor (let newTelegram of newTelegrams) {\r\n\t\t\tif (newTelegram.sequenceNumber != this.currentSequenceNumber) {\r\n\t\t\t\tconsole.log(`addTelegrams: Sequence number does not match. Start over. Expected: ${this.currentSequenceNumber}. Received: ${newTelegram.sequenceNumber}`);\r\n\t\t\t\tthis.resetSearch();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\tif (newTelegram.sequenceNumber === 0) {\r\n\t\t\t\tif (newTelegram.applicationData.length < 17) {\r\n\t\t\t\t\tconsole.warn(`addTelegrams: Application data length of first telegram in sequence invalid. Start over. Expected: >= 17. Received: ${newTelegram.applicationData.length}`);\r\n\t\t\t\t\tthis.resetSearch();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.cypheringService = newTelegram.applicationData[0];\r\n\t\t\t\tif (this.currentApplicationDataUnit.cypheringService != MultiTelegramReader.CypheringServiceGeneralGloCiphering) {\r\n\t\t\t\t\tconsole.warn(`addTelegrams: Application data cyphering service invalid. Start over. Expected: ${MultiTelegramReader.CypheringServiceGeneralGloCiphering.toString(16)}. Received: ${this.currentApplicationDataUnit.cypheringService.toString(16)}`);\r\n\t\t\t\t\tthis.resetSearch();\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.setSystemTitle(newTelegram.applicationData.subarray(2, 10));\r\n\r\n\t\t\t\t// length filed has either 1 byte (length <= 127) or 3 bytes\r\n\t\t\t\tconst lengthFieldLength = this.currentApplicationDataUnit.setLength(newTelegram.applicationData,10, 13);\r\n\t\t\t\tconst offset = lengthFieldLength - 1\r\n\r\n\t\t\t\tthis.currentApplicationDataUnit.securityControl = newTelegram.applicationData[11 + offset];\r\n\t\t\t\tthis.currentApplicationDataUnit.setFrameCounter(newTelegram.applicationData, 12 + offset, 16 + offset);\r\n\t\t\t}\r\n\t\t\tthis.currentApplicationDataUnits.push(newTelegram.applicationData);\r\n\r\n\t\t\tif (!newTelegram.isLastSegment) {\r\n\t\t\t\tthis.currentSequenceNumber++;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// last segment:\r\n\t\t\tthis.currentApplicationDataUnit.apduRaw = Buffer.concat(this.currentApplicationDataUnits);\r\n\t\t\tthis.currentApplicationDataUnit.encryptedPayload = this.currentApplicationDataUnit.apduRaw.subarray(16 + this.currentApplicationDataUnit.lengthFieldLength - 1)\r\n\r\n\t\t\tApplicationDataDecrypter.Decrypt(this.currentApplicationDataUnit);\r\n\r\n\t\t\tif (this.currentApplicationDataUnit.lengthEncryptedPayload != this.currentApplicationDataUnit.encryptedPayload.length) {\r\n\t\t\t\tconsole.warn(`addTelegrams: Application data length of combined segments invalid. Start over. Expected: ${this.currentApplicationDataUnit.lengthEncryptedPayload}. Received: ${this.currentApplicationDataUnit.encryptedPayload.length}`);\r\n\t\t\t\t//console.log(JSON.stringify(this.currentApplicationDataUnit));\r\n\t\t\t\tthis.resetSearch();\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\r\n\t\t\t// everything seems to be fine:\r\n\t\t\tif(this.provisioning == ApplicationDataProvisioning.all) {\r\n\t\t\t\tthis.applicationDataUnits.push(this.currentApplicationDataUnit);\r\n\t\t\t} else {\r\n\t\t\t\tthis.applicationDataUnits = [this.currentApplicationDataUnit];\r\n\t\t\t}\r\n\t\t\tthis.resetSearch();\r\n\t\t}\r\n\t\treturn this.areApplicationDataUnitsAvailable();\r\n\t}\r\n\r\n\tpublic getApplicationDataUnits(): ApplicationProtocolDataUnit[] {\r\n\t\tconst ret = [...this.applicationDataUnits];\r\n\t\tthis.applicationDataUnits = [];\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tprivate resetSearch() {\r\n\t\tthis.currentSequenceNumber = 0;\r\n\t\tthis.currentApplicationDataUnit = new ApplicationProtocolDataUnit();\r\n\t\tthis.currentApplicationDataUnits = [];\r\n\t}\r\n}\r\n","export class ReceiveBuffer {\r\n\r\n\tpublic buffer: Buffer;\r\n\tprivate _length: number = 0;\r\n\tpublic get length(): number {\r\n\t\treturn this._length;\r\n\t}\r\n\r\n\tpublic constructor(public initialSize: number, public maxSize: number = 8192) {\r\n\t\tthis.buffer = Buffer.allocUnsafe(initialSize);\r\n\t}\r\n\r\n\tpublic reset() {\r\n\t\tthis._length = 0;\r\n\t}\r\n\r\n\tpublic addBuffer(newBuffer: Buffer, newBufferStart = 0): boolean {\r\n\t\tconst newLength = newBuffer.length - newBufferStart + this._length;\r\n\t\tif(newLength > this.buffer.length) {\r\n\t\t\tif(newLength > this.maxSize) {\r\n\t\t\t\tconsole.error(`ReceiveBuffer.addBuffer overflow. Buffer size: ${this.buffer.length}. Max size: ${this.maxSize}. Current length: ${this._length}. New data length: ${newBuffer.length - newBufferStart}`);\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.buffer.length < this.maxSize) {\r\n\t\t\t\tconsole.warn(`ReceiveBuffer.addBuffer overflow. Buffer size: ${this.buffer.length}. Current length: ${this._length}. New data length: ${newBuffer.length - newBufferStart}. Size increased to ${this.maxSize}`);\r\n\t\t\t\tconst maxSizeBuffer = Buffer.allocUnsafe(this.maxSize);\r\n\t\t\t\tif(this._length > 0) {\r\n\t\t\t\t\tthis.buffer.copy(maxSizeBuffer, 0, 0, this._length);\r\n\t\t\t\t}\r\n\t\t\t\tthis.buffer = maxSizeBuffer;\r\n\t\t\t}\r\n\t\t}\r\n\t\tnewBuffer.copy(this.buffer, this._length, newBufferStart);\r\n\t\tthis._length = newLength;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic checkForNewStartIndex(startByte: number): boolean {\r\n\t\tconst firstPossibleIndex = 1;\r\n\t\tconst newStartByteIndex= this.buffer.indexOf(startByte, firstPossibleIndex);\r\n\t\tif(newStartByteIndex < firstPossibleIndex) {\r\n\t\t\tthis._length = 0;\r\n\t\t\treturn false;\r\n\t\t}\r\n\t\tthis.buffer.copy(this.buffer, 0, newStartByteIndex)\r\n\t\tthis._length -= newStartByteIndex;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tpublic asNumberArray(): number[] {\r\n\t\t//return [...this.buffer.subarray(0, this._length)];\r\n\t\t// stupid JS/Node: toJSON is 10 times faster.\r\n\r\n\t\tconst result: number[] = new Array(this._length);\r\n\t\tfor(let i = 0; i < this._length; i++) {\r\n\t\t\tresult[i] = this.buffer[i];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n","//import { config }  from 'config'\r\nimport * as config from 'config';\r\n\r\nexport class SerialPortSettings {\r\n\tpublic static port: string = '';\r\n\tpublic static baudRate: number = 2400;\r\n\tpublic static dataBits: 5 | 6 | 7 | 8  = 8;\r\n\tpublic static parity: 'none' | 'even' | 'odd' = 'none';\r\n\tpublic static stopBits: 1 | 1.5 | 2 = 1;\r\n\r\n\tpublic static read() {\r\n\t\tSerialPortSettings.port = config.get('SerialPort.port');\r\n\t\tSerialPortSettings.baudRate = config.get('SerialPort.baudRate');\r\n\t\tSerialPortSettings.dataBits = config.get('SerialPort.dataBits');\r\n\t\tSerialPortSettings.parity = config.get('SerialPort.parity');\r\n\t\tSerialPortSettings.stopBits = config.get('SerialPort.stopBits');\r\n\t}\r\n}\r\n\r\nexport class DecryptionSettings {\r\n\tpublic static key: string = '';\r\n\r\n\tpublic static read() {\r\n\t\tDecryptionSettings.key = config.get('Decryption.key');\r\n\t}\r\n}\r\n\r\nexport class DebugSettings {\r\n\t// stop after this many if > 0\r\n\tpublic static maxBytes = 0;             // raw bytes from serial port\r\n\tpublic static maxTelegrams = 0;\r\n\tpublic static maxApplicationDataUnits = 0;\r\n\r\n\tpublic static logSerialPort: false;\r\n\tpublic static logSerialPortMinBytes: 0  // log only after this number of bytes in queue\r\n\tpublic static logTelegramRaw: false;\r\n\tpublic static logTelegramJson: false;\r\n\r\n\tpublic static logApduRaw: false;\r\n\tpublic static logApduJson: false;\r\n\tpublic static logApduDecryptedRaw: false;\r\n\r\n\tpublic static read() {\r\n\t\tDebugSettings.maxBytes = config.get('Debug.maxBytes');\r\n\t\tDebugSettings.maxTelegrams = config.get('Debug.maxTelegrams');\r\n\t\tDebugSettings.maxApplicationDataUnits = config.get('Debug.maxApplicationDataUnits');\r\n\r\n\t\tDebugSettings.logSerialPort = config.get('Debug.logSerialPort');\r\n\t\tDebugSettings.logSerialPortMinBytes = config.get('Debug.logSerialPortMinBytes');\r\n\t\tDebugSettings.logTelegramRaw = config.get('Debug.logTelegramRaw');\r\n\t\tDebugSettings.logTelegramJson = config.get('Debug.logTelegramJson');\r\n\r\n\t\tDebugSettings.logApduRaw = config.get('Debug.logApduRaw');\r\n\t\tDebugSettings.logApduJson = config.get('Debug.logApduJson');\r\n\t\tDebugSettings.logApduDecryptedRaw = config.get('Debug.logApduDecryptedRaw');\r\n\t}\r\n}\r\n\r\nexport class Settings {\r\n\tpublic static serialPort = SerialPortSettings;\r\n\tpublic static decryption = DecryptionSettings;\r\n\tpublic static debug = DebugSettings;\r\n\r\n\tpublic static read() {\r\n\t\tSerialPortSettings.read();\r\n\t\tDecryptionSettings.read();\r\n\t\tDebugSettings.read();\r\n\t}\r\n}\r\n\r\n\r\n","import { TelegramState } from \"./enums\";\r\nimport { Telegram } from \"./telegram\";\r\nimport { ReceiveBuffer } from \"./receive-buffer\";\r\n\r\n// data link layer\r\nexport class TelegramReader {\r\n\r\n\tstatic readonly startByte: number = 0x68;\r\n\tstatic readonly stopByte: number = 0x16;\r\n\r\n\tprivate currentTelegram = new Telegram();\r\n\tprivate possibleStartFound = false;\r\n\r\n\tstatic readonly receiveBufferInitialSize = 512;\r\n\tstatic readonly receiveBufferMaxSize = 8192;\r\n\tprivate receiveBuffer = new ReceiveBuffer(TelegramReader.receiveBufferInitialSize, TelegramReader.receiveBufferMaxSize);\r\n\r\n\tprivate telegrams: Telegram[] = [];\r\n\r\n\tpublic areTelegramsAvailable(): TelegramState {\r\n\t\treturn this.telegrams.length > 0 ? TelegramState.available : TelegramState.pending;\r\n\t}\r\n\r\n\tpublic addRawData(newData: Buffer): TelegramState {\r\n\t\t//console.log('TelegramReader.addRawData', JSON.stringify(newData));\r\n\t\tlet sourceStart = 0;\r\n\t\tif(!this.possibleStartFound) {\r\n\t\t\tsourceStart = newData.indexOf(TelegramReader.startByte);\r\n\t\t\tif(sourceStart < 0) {\r\n\t\t\t\treturn this.areTelegramsAvailable();\r\n\t\t\t}\r\n\t\t\tthis.possibleStartFound = true;\r\n\t\t}\r\n\t\tif(!this.receiveBuffer.addBuffer(newData, sourceStart)) {\r\n\t\t\t// buffer overflow (receiveBufferMaxSize), ignore data and carry on\r\n\t\t\tthis.receiveBuffer.reset();\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\t\t// console.log('TelegramReader.addRawData this.data', JSON.stringify(this.data), this.data.length);\r\n\t\treturn this.checkTelegram()\r\n\t}\r\n\r\n\t// only fetch them once!\r\n\tpublic getTelegrams(): Telegram[] {\r\n\t\tconst ret = [...this.telegrams];\r\n\t\tthis.telegrams = [];\r\n\t\treturn ret;\r\n\t}\r\n\r\n\tprivate resetSearch() {\r\n\t\tthis.possibleStartFound =false;\r\n\t\tthis.currentTelegram = new Telegram();\r\n\t}\r\n\r\n\tprivate checkTelegram(): TelegramState {\r\n\t\tif(this.receiveBuffer.length < 4){\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\r\n\t\tif(this.currentTelegram.lengthData <= 0) {\r\n\t\t\t// check for telegram start sequence\r\n\t\t\tif(this.receiveBuffer.buffer[3] != TelegramReader.startByte || this.receiveBuffer.buffer[1] != this.receiveBuffer.buffer[2]) {\r\n\t\t\t\treturn this.checkForNewStartIndex();\r\n\t\t\t}\r\n\t\t\tthis.currentTelegram.lengthData = this.receiveBuffer.buffer[1];\r\n\t\t}\r\n\r\n\t\tif(this.currentTelegram.lengthData <= 3) {\r\n\t\t\t// control frame -> ignore\r\n\t\t\treturn this.checkForNewStartIndex();\r\n\t\t}\r\n\r\n\t\t// long frame\r\n\r\n\t\tif(this.receiveBuffer.length < this.currentTelegram.lengthTotal) {\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\r\n\t\tif(this.receiveBuffer.buffer[this.currentTelegram.lengthTotal - 1] != TelegramReader.stopByte) {\r\n\t\t\treturn this.checkForNewStartIndex();\r\n\t\t}\r\n\r\n\t\tconst calculatedChecksum = this.checkChecksum();\r\n\t\tthis.currentTelegram.checkSum = this.receiveBuffer.buffer[this.currentTelegram.lengthTotal - 2];\r\n\t\tif(calculatedChecksum != this.currentTelegram.checkSum) {\r\n\t\t\tconsole.warn('Invalid checksum', calculatedChecksum, this.currentTelegram.checkSum);\r\n\t\t\treturn this.checkForNewStartIndex();\r\n\t\t}\r\n\r\n\t\t// seems like everything is fine - set telegram fields\r\n\t\tthis.currentTelegram.telegramRaw = this.receiveBuffer.buffer.subarray(0, this.currentTelegram.lengthTotal);\r\n\r\n\t\t// rest of data link layer data:\r\n\t\tthis.currentTelegram.controlField = this.receiveBuffer.buffer[4];   // should be 0x53 (83 dec)\r\n\t\tthis.currentTelegram.addressField = this.receiveBuffer.buffer[5];   // should be 0xFF (255 dec) Broadcast without reply\r\n\r\n\t\t// transport layer data:\r\n\t\tthis.currentTelegram.controlInformationField = this.receiveBuffer.buffer[6];\r\n\t\tthis.currentTelegram.sourceAddress = this.receiveBuffer.buffer[7];\r\n\t\tthis.currentTelegram.destinationAddress = this.receiveBuffer.buffer[8];\r\n\r\n\t\t// application layer data:\r\n\t\tthis.currentTelegram.applicationData = this.receiveBuffer.buffer.subarray(9, this.currentTelegram.lengthTotal - 2);\r\n\r\n\t\t// reset for next telegram\r\n\t\tthis.telegrams.push(this.currentTelegram);\r\n\t\tconst len = this.currentTelegram.lengthTotal;\r\n\t\tthis.resetSearch();\r\n\t\tif(this.receiveBuffer.length <= len) {\r\n\t\t\tthis.receiveBuffer = new ReceiveBuffer(TelegramReader.receiveBufferInitialSize, TelegramReader.receiveBufferMaxSize);\r\n\t\t\treturn TelegramState.available;\r\n\t\t}\r\n\r\n\t\t// more data in receiveBuffer:\r\n\t\tconst oldReceiveBuffer = this.receiveBuffer;\r\n\t\tthis.receiveBuffer = new ReceiveBuffer(TelegramReader.receiveBufferInitialSize, TelegramReader.receiveBufferMaxSize);\r\n\t\tthis.receiveBuffer.addBuffer(oldReceiveBuffer.buffer.subarray(0, oldReceiveBuffer.length), len);\r\n\r\n\t\treturn this.checkTelegram()\r\n\t}\r\n\r\n\tprivate checkForNewStartIndex(): TelegramState {\r\n\t\tthis.resetSearch();\r\n\t\tif(!this.receiveBuffer.checkForNewStartIndex(TelegramReader.startByte)) {\r\n\t\t\treturn this.areTelegramsAvailable();\r\n\t\t}\r\n\t\tthis.possibleStartFound = true;\r\n\t\t// recursive - if multiple telegrams are within the raw data added at once\r\n\t\treturn this.checkTelegram();\r\n\t}\r\n\r\n\tprivate checkChecksum() {\r\n\t\tconst start = 4;\r\n\t\tconst end = this.currentTelegram.lengthTotal! - 2;\r\n\t\tlet sum = 0;\r\n\t\tfor(let i = start; i < end; i++) {\r\n\t\t\tsum += this.receiveBuffer.buffer[i];\r\n\t\t}\r\n\t\treturn sum & 0xFF;\r\n\t}\r\n}\r\n\r\n","\r\n// represents data link, transport and application layer of single telegram\r\nexport class Telegram {\r\n\t// data link layer:\r\n\r\n\tprivate _lengthData: number = 0;\r\n\tprivate _lengthTotal: number = 0;\r\n\tprivate _lengthTransportData: number = 0;\r\n\tprivate _lengthApplicationData: number = 0;\r\n\r\n\tpublic set lengthData(len: number) {\r\n\t\tthis._lengthData = len;\r\n\t\tthis._lengthTotal = len + 6;   // 2x start, 2x len, checksum, stop\r\n\t\tthis._lengthTransportData = len - 2  // len user-data + C, A, CI field. CI is part of transport layer\r\n\t\tthis._lengthApplicationData = len - 5; // transport minus CI, STSAP, DTSAP\r\n\t}\r\n\tpublic get lengthData(): number {\r\n\t\treturn this._lengthData\r\n\t}\r\n\tpublic get lengthTotal(): number {\r\n\t\treturn this._lengthTotal\r\n\t}\r\n\tpublic get lengthTransportData(): number {\r\n\t\treturn this._lengthTransportData\r\n\t}\r\n\tpublic get lengthApplicationData(): number {\r\n\t\treturn this._lengthApplicationData\r\n\t}\r\n\r\n\tpublic checkSum: number = -1;\r\n\tpublic controlField: number = 0;    // C field\r\n\tpublic addressField: number = 0;    // A field\r\n\r\n\r\n\t// transport layer\r\n\t// TPDU (transport protocol data unit)\r\n\r\n\tprivate _controlInformationField: number = 0;\r\n\tprivate _sequenceNumber: number = 0;\r\n\tprivate _isLastSegment: boolean = true; // or application data is only in one single telegram\r\n\r\n\t// CI field:\r\n\tpublic set controlInformationField(ciField: number) {\r\n\t\tthis._controlInformationField = ciField;\r\n\t\tthis._sequenceNumber = this._controlInformationField & 0b00001111;\r\n\t\tthis._isLastSegment = (this._controlInformationField & 0b00010000) == 0b00010000;\r\n\t}\r\n\tpublic get controlInformationField(): number {\r\n\t\treturn this._controlInformationField;\r\n\t}\r\n\tpublic get sequenceNumber(): number {\r\n\t\treturn this._sequenceNumber;\r\n\t}\r\n\tpublic get isLastSegment(): boolean {\r\n\t\treturn this._isLastSegment;\r\n\t}\r\n\r\n\tpublic sourceAddress: number = 0;           // STSAP (source transport service access point)\r\n\tpublic destinationAddress: number = 0;  \t// DTSAP (destination transport service access point)\r\n\r\n\t// application layer\r\n\t// APDU (application protocol data unit)\r\n\t// may be incomplete if split up into multiple segments in multiple telegrams\r\n\tpublic applicationData: Buffer;\r\n\r\n\t// raw telegram data\r\n\tpublic telegramRaw: Buffer;\r\n}\r\n","\r\nexport class Tools {\r\n\r\n\tpublic static getStringFromByteArray(bytes: number[]): string {\r\n\t\treturn String.fromCharCode(...bytes);\r\n\t}\r\n\r\n\tpublic static getNumberFromByteArray(bytes: number[]): number {\r\n\t\tlet result = 0;\r\n\t\tfor(let i = bytes.length - 1, multiplier = 1; i >= 0; i--) {\r\n\t\t\tresult += bytes[i] * multiplier;\r\n\t\t\tmultiplier *= 256;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tpublic static getByteArrayFromHexString(hexString: string): number[] {\r\n\t\t// remove whitespaces\r\n\t\thexString = hexString.replace(/\\s+/g, '')\r\n\t\tlet bytes = [];\r\n\t\tfor (let c = 0; c < hexString.length; c += 2) {\r\n\t\t\tbytes.push(parseInt(hexString.substring(c, c + 2), 16));\r\n\t\t}\r\n\t\treturn bytes;\r\n\t}\r\n\r\n\tpublic static getHexStringFromByteArray(bytes: number[], withSpaces = false) {\r\n\t\tlet hexStrings = [];\r\n\t\tfor (let i = 0; i < bytes.length; i++) {\r\n\t\t\tconst current = bytes[i] < 0 ? bytes[i] + 256 : bytes[i];\r\n\t\t\thexStrings.push((current >>> 4).toString(16));\r\n\t\t\thexStrings.push((current & 0xF).toString(16));\r\n\t\t}\r\n\t\treturn hexStrings.join(withSpaces ? ' ' : '');\r\n\t}\r\n\r\n\tpublic static getNumberFromBuffer(buffer: Buffer, start = 0, end?: number): number {\r\n\t\tif(end == undefined) end = buffer.length;\r\n\t\tlet result = 0;\r\n\t\tfor(let i = end - 1, multiplier = 1; i >= start; i--) {\r\n\t\t\tresult += buffer[i] * multiplier;\r\n\t\t\tmultiplier *= 256;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n}\r\n","module.exports = require(\"config\");","module.exports = require(\"serialport\");","module.exports = require(\"crypto\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { SerialPort } from 'serialport';\r\n\r\nimport { TelegramReader } from \"./lib/telegram-reader\";\r\nimport { ApplicationDataState, TelegramState } from \"./lib/enums\";\r\nimport { MultiTelegramReader } from \"./lib/multi-telegram-reader\";\r\nimport { DebugSettings, SerialPortSettings, Settings } from \"./lib/settings/setting-classes\";\r\nimport { Telegram } from \"./lib/telegram\";\r\nimport { ApplicationProtocolDataUnit } from \"./lib/application-protocol-data-unit\";\r\n\r\nlet logSerialPortBuffers: Buffer[] = [];\r\nlet logSerialPortByteCount = 0;\r\nlet serialPortByteCount = 0;\r\nlet telegramCount = 0;\r\nlet applicationDataUnitCount = 0;\r\nlet prematureStops = false;\r\nlet port: SerialPort;\r\n\r\nfunction main() {\r\n\tSettings.read();\r\n\tinit();\r\n\r\n\tport = new SerialPort({\r\n\t\tpath: SerialPortSettings.port,\r\n\t\tbaudRate: SerialPortSettings.baudRate,\r\n\t\tdataBits: SerialPortSettings.dataBits,\r\n\t\tparity: SerialPortSettings.parity,\r\n\t\tstopBits: SerialPortSettings.stopBits\r\n\t});\r\n\r\n\tconst telegramReader = new TelegramReader();\r\n\tconst multiTelegramReader = new MultiTelegramReader(telegramReader);\r\n\r\n\tport.on('data', function (serialPortData: Buffer) {\r\n\t\tif(DebugSettings.logSerialPort) {\r\n\t\t\tlogSerialPortData(serialPortData);\r\n\t\t}\r\n\r\n\t\tserialPortByteCount += serialPortData.length;\r\n\r\n\t\tconst telegramResultState = telegramReader.addRawData(serialPortData);\r\n\t\tif(telegramResultState == TelegramState.available) {\r\n\t\t\tconst telegrams = telegramReader.getTelegrams();\r\n\t\t\ttelegramCount += telegrams.length;\r\n\t\t\tlogTelegrams(telegrams);\r\n\r\n\t\t\tconst applicationDataUnitState = multiTelegramReader.addTelegrams(telegrams);\r\n\t\t\tif(applicationDataUnitState == ApplicationDataState.available) {\r\n\t\t\t\tconst applicationDataUnits = multiTelegramReader.getApplicationDataUnits();\r\n\t\t\t\tapplicationDataUnitCount += applicationDataUnits.length\r\n\t\t\t\tlogApplicationDataUnits(applicationDataUnits);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(prematureStops) checkForDebugStops();\r\n\t})\r\n\r\n\tport.on('error', function(err) {\r\n\t\tconsole.error('Serial port error: ', err.message)\r\n\t})\r\n}\r\n\r\nfunction init() {\r\n\tprematureStops = DebugSettings.maxBytes > 0 || DebugSettings.maxTelegrams > 0 || DebugSettings.maxApplicationDataUnits > 0;\r\n}\r\n\r\nfunction logSerialPortData(serialPortData: Buffer): void {\r\n\tif(DebugSettings.logSerialPortMinBytes <= 1) {\r\n\t\tconsole.log(serialPortData.toString('hex'));\r\n\t\treturn;\r\n\t}\r\n\tif(logSerialPortByteCount == 0 && serialPortData.length >= DebugSettings.logSerialPortMinBytes) {\r\n\t\tconsole.log(serialPortData.toString('hex'));\r\n\t\treturn;\r\n\t}\r\n\tlogSerialPortBuffers.push(serialPortData);\r\n\tlogSerialPortByteCount += serialPortData.length;\r\n\tif(logSerialPortByteCount < DebugSettings.logSerialPortMinBytes) {\r\n\t\treturn;\r\n\t}\r\n\tconsole.log(Buffer.concat(logSerialPortBuffers).toString('hex'));\r\n\tlogSerialPortBuffers = [];\r\n\tlogSerialPortByteCount = 0;\r\n}\r\n\r\nfunction logTelegrams(telegrams: Telegram[]): void {\r\n\tif(DebugSettings.logTelegramRaw){\r\n\t\ttelegrams.forEach((t) => console.log('Telegram: ', t.telegramRaw.toString('hex')));\r\n\t}\r\n\tif(DebugSettings.logTelegramJson) {\r\n\t\ttelegrams.forEach((t) => console.log('Telegram: ', t));\r\n\t}\r\n}\r\n\r\nfunction logApplicationDataUnits(applicationDataUnits: ApplicationProtocolDataUnit[]): void {\r\n\tif(DebugSettings.logApduRaw){\r\n\t\tapplicationDataUnits.forEach((apdu) => console.log('APDU: ', apdu.apduRaw.toString('hex')));\r\n\t}\r\n\tif(DebugSettings.logApduJson) {\r\n\t\tapplicationDataUnits.forEach((apdu) => console.log('APDU: ', apdu));\r\n\t}\r\n\tif(DebugSettings.logApduDecryptedRaw) {\r\n\t\tapplicationDataUnits.forEach((apdu) => console.log('APDU payload decrypted: ', apdu.decryptedPayload.toString('hex')));\r\n\t}\r\n}\r\n\r\nfunction checkForDebugStops() {\r\n\tif( (DebugSettings.maxBytes == 0 || serialPortByteCount < DebugSettings.maxBytes) &&\r\n\t\t(DebugSettings.maxTelegrams == 0 || telegramCount < DebugSettings.maxTelegrams) &&\r\n\t\t(DebugSettings.maxApplicationDataUnits == 0 || applicationDataUnitCount < DebugSettings.maxApplicationDataUnits)) {\r\n\t\treturn;\r\n\t}\r\n\r\n\tif(DebugSettings.logSerialPort && DebugSettings.logSerialPortMinBytes > 1 && logSerialPortByteCount > 0) {\r\n\t\tconsole.log(Buffer.concat(logSerialPortBuffers).toString('hex'));\r\n\t}\r\n\r\n\tport.close((error) => {\r\n\t\tif(error) console.error(error);\r\n\t\tprocess.exit(1);\r\n\t});\r\n\r\n\tconsole.log(`Stopping because of Debug config: maxBytes (${DebugSettings.maxBytes}), maxTelegrams (${DebugSettings.maxTelegrams}) or maxApplicationDataUnits (${DebugSettings.maxApplicationDataUnits}) > 0 ...`);\r\n}\r\n\r\nmain();\r\n\r\n\r\n\r\n\r\n"],"names":["static","applicationDataUnit","key","Buffer","from","DecryptionSettings","iv","concat","systemTitle","frameCounter","ctrIv","decipher","crypto","createDecipheriv","update","encryptedPayload","final","decryptedPayload","setSystemTitle","rawData","this","_systemTitle","_systemTitleManufacturerId","subarray","toString","_serialNumber","Tools","getNumberFromBuffer","first","padStart","second","rest","_systemTitleText","i","padLength","length","getNumberFromByteArray","systemTitleManufacturerId","systemTitleText","setLength","buffer","start","end","undefined","_lengthField","_lengthFieldLength","_lengthEncryptedPayload","_lengthTotal","lengthFieldLength","lengthTotal","lengthEncryptedPayload","lengthField","securityControl","value","_securityControl","_securitySuiteId","_securityAuthentication","_securityEncryption","_securityKeySet","KeySet","broadcast","unicast","_securityCompression","securitySuiteId","securityAuthentication","securityEncryption","securityKeySet","securityCompression","setFrameCounter","_frameCounter","_frameCounterNumber","frameCounterNumber","ApplicationDataProvisioning","ApplicationDataState","TelegramState","MultiTelegramReader","constructor","telegramReader","provisioning","lastOnly","applicationDataUnits","currentApplicationDataUnit","ApplicationProtocolDataUnit","currentApplicationDataUnits","currentSequenceNumber","areApplicationDataUnitsAvailable","available","pending","addRawData","newData","telegrams","getTelegrams","addTelegrams","newTelegrams","newTelegram","sequenceNumber","applicationData","console","warn","resetSearch","cypheringService","CypheringServiceGeneralGloCiphering","offset","push","isLastSegment","apduRaw","ApplicationDataDecrypter","Decrypt","all","log","getApplicationDataUnits","ret","initialSize","maxSize","_length","allocUnsafe","reset","addBuffer","newBuffer","newBufferStart","newLength","error","maxSizeBuffer","copy","checkForNewStartIndex","startByte","newStartByteIndex","indexOf","asNumberArray","result","Array","SerialPortSettings","port","config","get","baudRate","dataBits","parity","stopBits","DebugSettings","maxBytes","maxTelegrams","maxApplicationDataUnits","logSerialPort","logSerialPortMinBytes","logTelegramRaw","logTelegramJson","logApduRaw","logApduJson","logApduDecryptedRaw","Settings","read","serialPort","decryption","debug","TelegramReader","currentTelegram","Telegram","possibleStartFound","receiveBuffer","ReceiveBuffer","receiveBufferInitialSize","receiveBufferMaxSize","areTelegramsAvailable","sourceStart","checkTelegram","lengthData","stopByte","calculatedChecksum","checkChecksum","checkSum","telegramRaw","controlField","addressField","controlInformationField","sourceAddress","destinationAddress","len","oldReceiveBuffer","sum","_lengthData","_lengthTransportData","_lengthApplicationData","_controlInformationField","_sequenceNumber","_isLastSegment","lengthTransportData","lengthApplicationData","ciField","bytes","String","fromCharCode","multiplier","hexString","replace","c","parseInt","substring","withSpaces","hexStrings","current","join","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","logSerialPortBuffers","logSerialPortByteCount","serialPortByteCount","telegramCount","applicationDataUnitCount","prematureStops","SerialPort","path","multiTelegramReader","on","serialPortData","logSerialPortData","forEach","t","logTelegrams","apdu","logApplicationDataUnits","close","process","exit","err","message","main"],"sourceRoot":""}